@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
    <!-- Element CSS -->
    <link rel="stylesheet" href="/lib/Element/css/index.css">
    <!-- 全局通用样式 -->
    <link rel="stylesheet" href="/lib/css/style.css" />
    <title></title>
    <style>
        .Tips {
            margin-top: 20px;
        }

            .Tips span {
                color: #0094ff;
                font-weight: 900;
                margin-left: 10px;
                margin-right: 10px;
            }

        .el-checkbox__input.is-disabled .el-checkbox__inner {
            display: none;
        }
    </style>
</head>
<body>
    <div id="app" v-cloak>
        <el-container>
            <el-header height="40">
                <div class="SelectDiv">
                    <div class="InputContainer">
                        <el-input v-model="model.Push_NikeName" placeholder="推广人昵称" clearable></el-input>
                    </div>
                    <div class="InputContainer">
                        <el-input v-model="model.Push_WxOpenID" placeholder="推广人代码" clearable></el-input>
                    </div>
                    <div class="DatePickContainer">
                        <el-date-picker v-model="model.Times"
                                        type="daterange"
                                        align="right"
                                        unlink-panels
                                        range-separator="至"
                                        start-placeholder="开始日期"
                                        end-placeholder="结束日期"
                                        :picker-options="pickerOptions"
                                        style="width:410px;">
                        </el-date-picker>
                    </div>
                    <div class="SelectContainerLager">
                        <el-select v-model="model.CheckState" placeholder="结算状态" style="width:100%;">
                            <el-option label="全部状态" :value="-1"></el-option>
                            <el-option label="未提现" :value="0"></el-option>
                            <el-option label="申请中" :value="2"></el-option>
                            <el-option label="已提现" :value="1"></el-option>
                        </el-select>
                    </div>
                    <div class="ButtonContainer">
                        <el-button type="primary" icon="el-icon-search" @@click="Select">搜索</el-button>
                    </div>
                    <div class="ButtonContainer">
                        <el-button type="success" icon="success" @@click="Check">批量结算</el-button>
                    </div>
                    <div class="Tips">共有<span>{{SUM.DATACOUNT}}</span>笔佣金，共计<span>{{Format(SUM.DATASUM)}}</span>元</div>
                </div>
            </el-header>
            <el-main>
                <el-table :data="tableData"
                          ref="multipleTable"
                          size="mini"
                          border
                          max-height="500"
                          row-key="ID"
                          style="width: 100%;min-height:487px;"
                          @@selection-change="handleSelectionChange">
                    <el-table-column type="selection"
                                     width="55" :selectable="selectable">

                    </el-table-column>
                    <el-table-column prop="ID"
                                     label="ID"
                                     width="50"
                                     align="center" width="50">
                    </el-table-column>
                    <el-table-column prop="BackStamp"
                                     label="支付时间"
                                     width="170">
                    </el-table-column>
                    <el-table-column prop="OrderNumber"
                                     label="订单号">
                    </el-table-column>
                    <el-table-column prop="CheckState"
                                     label="提现状态" width="100">
                        <template slot-scope="scope">
                            <el-tag type="info" v-if="scope.row.CheckState==0">未提现</el-tag>
                            <el-tag v-else-if="scope.row.CheckState==2">申请中</el-tag>
                            <el-tag type="success" v-else>已提现</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column prop="Buy_NikeName"
                                     label="支付人昵称"
                                     width="200">
                    </el-table-column>
                    <el-table-column prop="Push_NikeName"
                                     label="分佣人昵称"
                                     width="200">
                    </el-table-column>
                    <el-table-column prop="Push_WxOpenID"
                                     label="分佣人代码"
                                     width="250">
                    </el-table-column>
                    <el-table-column prop="CommodityName"
                                     label="套餐名称"
                                     width="120">
                    </el-table-column>
                    <el-table-column prop="ShareCommission"
                                     label="分佣比例"
                                     width="110">
                    </el-table-column>
                    <el-table-column prop="OrderAmountYuan"
                                     label="支付金额（元）"
                                     width="110">
                        <template slot-scope="scope">
                            {{Format(scope.row.OrderAmountYuan)}}
                        </template>
                    </el-table-column>
                    <el-table-column prop="Commission"
                                     label="分佣金额（元）"
                                     width="110">
                        <template slot-scope="scope">
                            <span style="color: #0094ff;">{{Format(scope.row.Commission)}}</span>
                        </template>
                    </el-table-column>
                </el-table>
            </el-main>
            <el-footer>
                <el-pagination @@size-change="handleSizeChange"
                               @@current-change="handleCurrentChange"
                               :current-page="PageParams.PageNum"
                               :page-sizes="PageParams.PageSizeList"
                               :page-size="PageParams.PageSize"
                               layout="total, sizes, prev, pager, next, jumper"
                               :total="PageParams.Total"
                               style="width:99%;">
                </el-pagination>
            </el-footer>
            <el-dialog :title="Dialog.Title" :visible.sync="Dialog.Show">

            </el-dialog>
        </el-container>
    </div>
    <script src="/lib/Vue/vue.js"></script>
    <script src="/lib/Element/js/index.js"></script>
    <script src="/lib/axios/axios.js"></script>
    <script src="/lib/Scripts/admin.js"></script>
    <script>
        new Vue({
            el: '#app',
            data: function () {
                return {
                    pickerOptions: {
                        shortcuts: [{
                            text: '最近一周',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '最近一个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '最近三个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
                                picker.$emit('pick', [start, end]);
                            }
                        }]
                    },
                    SUM: {
                        DATACOUNT: 0,
                        DATASUM: 0.00,
                    },
                    tableData: [],
                    PageParams: {
                        PageSizeList: window.PageSizeList,
                        PageNum: 1,
                        PageSize: 10,
                        Total: 0
                    },
                    model: {
                        CheckState: -1,
                        Times: [this.SRecentTime(), this.ERecentTime()],//时间,
                        Push_NikeName: '',
                        Push_WxOpenID: '',
                    },
                    Dialog: {
                        Title: '',
                        Show: false,
                    },
                    labelwidth: '35%',
                    thisRow: {},
                    multipleSelection: []
                };
            },
            methods: {
                //复选框状态
                selectable(row, index) {
                    if (row.CheckState == 1) {
                         return false;
                    }
                    return true;
                },
                handleSelectionChange(val) {
                    this.multipleSelection = val;
                },
                //批量结算
                Check() {
                    const that = this;
                    if (this.multipleSelection.length == 0) {
                        that.$message({
                            type: 'info',
                            message: '未勾选数据'
                        });
                        return
                    };
                    that.$confirm('确认结算勾选的数据吗, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios({
                            method: 'put',
                            url: '/ChatGPT/Commission/CheckList',
                            data: this.multipleSelection,
                            headers: {
                                'Content-Type': 'application/json; charset=UTF-8'
                            },
                        }).then(function (res) {
                            that.multipleSelection.forEach(item => {
                                item.CheckState = 1;
                            });
                            that.multipleSelection = [];
                            that.$refs.multipleTable.clearSelection();
                            that.$message({
                                type: 'success',
                                message: '结算成功！'
                            });
                        }).catch(function (err) {
                            that.$message.error(err);
                        });
                    }).catch(() => {
                        that.$message({
                            type: 'info',
                            message: '已取消'
                        });
                    });
                },
                //千位符函数
                Format(num) {
                    if (num) {
                        const Number = parseFloat(num).toFixed(2);
                        return Number.replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
                    }
                    else {
                        return '0.00';
                    }
                },
                //时间转换
                DateConvert(TimeStamp) {
                    var Time = new Date(TimeStamp);
                    var Year = Time.getFullYear();
                    var Month = Time.getMonth() + 1;
                    var Day = Time.getDate();
                    return Year + '-' + this.Supplement(Month) + '-' + this.Supplement(Day);
                },
                //时间零补位
                Supplement(TimeVal) {
                    return parseInt(TimeVal) < 10 ? '0' + TimeVal : TimeVal
                },
                //最近一个月(开始时间)
                SRecentTime() {
                    const start = new Date();
                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                    return start;
                },
                //最近一个月(结束时间)
                ERecentTime() {
                    const end = new Date();
                    return end;
                },
                Select() {
                    this.PageParams.pageNum = 1;
                    this.GetListPage();
                },
                GetListPage() {
                    const that = this;
                    //开始时间
                    let TimeStart = '';
                    let TimeEnd = '';
                    if (that.model.Times.length > 0) {
                        TimeStart = that.DateConvert(that.model.Times[0]);
                        TimeEnd = that.DateConvert(that.model.Times[1]);
                    }
                    axios({
                        method: 'get',
                        url: '/ChatGPT/Commission/GetListPage',
                        params: {
                            Push_NikeName: that.model.Push_NikeName,
                            Push_WxOpenID: that.model.Push_WxOpenID,
                            CheckState: that.model.CheckState,
                            TimeStart: TimeStart,
                            TimeEnd: TimeEnd,
                            PageNum: that.PageParams.PageNum,
                            PageSize: that.PageParams.PageSize,
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.SUM.DATACOUNT = res.DATACOUNT;
                        that.SUM.DATASUM = res.DATASUM;
                        that.tableData = res.DATA;
                        that.PageParams.Total = res.DATACOUNT;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                    this.tableData;
                },
                handleSizeChange(pageSize) {
                    //当前页数
                    this.PageParams.PageNum = 1;
                    //当前页最大值
                    this.PageParams.PageSize = pageSize;
                    this.GetListPage();
                },
                handleCurrentChange(pageNum) {
                    //当前页数
                    this.PageParams.PageNum = pageNum;
                    this.GetListPage();
                },
                CheckTime(Time) {
                    let DataTime = new Date(Time);
                    let TimeNow = new Date();
                    if (TimeNow > DataTime) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            created: function () {
                var parms = getURLParams();
                if (parms.id) {
                    this.model.Push_WxOpenID = parms.id;
                    this.model.CheckState = 2;
                }
                this.GetListPage();
            },
            mounted: function () {

            }
        })
    </script>
</body>
</html>
