@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
    <!-- Element CSS -->
    <link rel="stylesheet" href="/lib/Element/css/index.css">
    <!-- 全局通用样式 -->
    <link rel="stylesheet" href="/lib/css/style.css" />
    <title></title>
    <style>
    </style>
</head>
<body>
    <div id="app" v-cloak>
        <el-container class="font">
            <el-main>
                <el-card class="box-card" style="width:50%;margin:0px auto;">
                    <div slot="header" class="clearfix">
                        <span>
                            最后更新时间&nbsp;&nbsp;&nbsp;<el-tag>{{GPT_Setup.Stamp}}</el-tag>
                        </span>
                        <el-button style="float: right; margin-left: 10px;" type="primary" @@click="Submit('form')" size="small">保存</el-button>
                        <el-button style="float: right;" type="warning" @@click="Update" size="small">更新Key池缓存</el-button>
                        <el-button style="float: right;" type="success" @@click="Get" size="small">获取当前有效Key池缓存</el-button>
                    </div>
                    <div class="text item">
                        <el-form ref="form" :model="GPT_Setup" label-width="170px" :rules="Rule">
                            <el-form-item label="移动端标题" prop="Title">
                                <el-input v-model="GPT_Setup.Title"></el-input>
                            </el-form-item>
                            <el-form-item label="分享描述" prop="Desc_">
                                <el-input type="textarea"
                                          :rows="4" v-model="GPT_Setup.Desc_"></el-input>
                            </el-form-item>
                            <el-form-item label="API接口地址" prop="ApiUrl">
                                <el-input v-model="GPT_Setup.ApiUrl"></el-input>
                            </el-form-item>
                            <el-form-item label="新用户体验次数" prop="Free_Second">
                                <el-input-number v-model="GPT_Setup.Free_Second" :min="1" :max="500" label="免费次数"></el-input-number>
                            </el-form-item>
                            <el-form-item label="佣金提现门槛金额" prop="DoorJe">
                                <el-input-number v-model="GPT_Setup.DoorJe" :min="1" :max="3000" label="提现门槛金额"></el-input-number>
                            </el-form-item>
                            <el-form-item label="普通会员输入字数限制" prop="VIP_NumberWords">
                                <el-input-number v-model="GPT_Setup.VIP_NumberWords" :min="1" :max="200" label="绘画次数"></el-input-number>
                            </el-form-item>
                            <el-form-item label="SVIP会员绘画每月次数" prop="Draw_Second">
                                <el-input-number v-model="GPT_Setup.Draw_Second" :min="1" :max="100" label="字数限制"></el-input-number>
                            </el-form-item>
                            <el-form-item label="新用户免费绘画次数" prop="Free_DrawSecond">
                                <el-input-number v-model="GPT_Setup.Free_DrawSecond" :min="1" :max="100" label="绘画次数"></el-input-number>
                            </el-form-item>
                            <el-form-item label="分销说明" prop="CommissionRemark">
                                <el-input type="textarea"
                                          :rows="8" v-model="GPT_Setup.CommissionRemark"></el-input>
                            </el-form-item>
                            <el-form-item label="分销海报" prop="PushImg">
                                <el-upload action="/ChatGPT/Bot/UploedImg"
                                           list-type="picture-card"
                                           :show-file-list="false"
                                           :on-preview="handlePictureCardPreview"
                                           accept=".jpg,.png"
                                           :on-exceed="handleExceed"
                                           :before-upload="beforeupload"
                                           :on-success="TopicSuccess"
                                           :file-list="imagesfileList">
                                    <img height="100%;" v-if="GPT_Setup.PushImg" :src="GPT_Setup.PushImg" class="avatar">
                                    <i v-else class="el-icon-plus" style="color:#fff;"></i>
                                </el-upload>
                            </el-form-item>
                            <el-form-item label="系统公告" prop="Notice">
                                <el-input type="textarea"
                                          :rows="8" v-model="GPT_Setup.Notice"></el-input>
                            </el-form-item>
                            <el-tabs v-model="activeName" v-if="tabshow">
                                <el-tab-pane label="SVIP" name="first">
                                    <el-form-item label="SVIP标题">
                                        <el-input v-model="GPT_Setup.VIPReamrk[0].Title"></el-input>
                                    </el-form-item>
                                    <el-form-item label="SVIP具体说明">
                                        <el-input type="textarea"
                                                  :rows="8" v-model="GPT_Setup.VIPReamrk[0].Mx"></el-input>
                                    </el-form-item>
                                </el-tab-pane>
                                <el-tab-pane label="VIP" name="second">
                                    <el-form-item label="VIP标题">
                                        <el-input v-model="GPT_Setup.VIPReamrk[1].Title"></el-input>
                                    </el-form-item>
                                    <el-form-item label="VIP具体说明">
                                        <el-input type="textarea"
                                                  :rows="8" v-model="GPT_Setup.VIPReamrk[1].Mx"></el-input>
                                    </el-form-item>
                                </el-tab-pane>
                                <el-tab-pane label="AI绘画" name="third">
                                    <el-form-item label="AI绘画标题">
                                        <el-input v-model="GPT_Setup.VIPReamrk[2].Title"></el-input>
                                    </el-form-item>
                                    <el-form-item label="AI绘画具体说明">
                                        <el-input type="textarea"
                                                  :rows="8" v-model="GPT_Setup.VIPReamrk[2].Mx"></el-input>
                                    </el-form-item>
                                </el-tab-pane>
                            </el-tabs>
                        </el-form>
                    </div>
                </el-card>
            </el-main>
        </el-container>
        <el-dialog title="当前缓存中有效的Key池" :visible.sync="dialogTableVisible" top="5">
            <el-table :data="gridData">
                <el-table-column property="APIKEY" label="Key"></el-table-column>
                <el-table-column property="i" label="轮询次数" width="200"></el-table-column>
                <el-table-column property="DateTime" label="时间" width="200"></el-table-column>
            </el-table>
        </el-dialog>
    </div>
    <script src="/lib/Vue/vue.js"></script>
    <script src="/lib/Element/js/index.js"></script>
    <script src="/lib/axios/axios.js"></script>
    <script src="/lib/Scripts/admin.js"></script>
    <script>
        new Vue({
            el: '#app',
            data: function () {
                return {
                    activeName: 'first',
                    tabshow: false,
                    dialogTableVisible: false,
                    gridData: [],
                    imagesfileList: [],
                    GPT_Setup: {
                    },
                    Rule: {
                        Title: [
                            { required: true, message: '请输入移动端标题', trigger: 'blur' }
                        ],
                        ApiUrl: [
                            { required: true, message: '请输入API接口地址', trigger: 'blur' }
                        ],
                        Free_Second: [
                            { required: true, message: '请输入新用户体验次数', trigger: 'blur' }
                        ],
                        VIP_NumberWords: [
                            { required: true, message: '请输入限制字数', trigger: 'blur' }
                        ],
                        Draw_Second: [
                            { required: true, message: '请输入限制绘画次数', trigger: 'blur' }
                        ],
                        PushImg: [
                            { required: true, message: '请选择推广海报', trigger: 'blur' }
                        ],
                        Free_DrawSecond: [
                            { required: true, message: '请输入免费绘画次数', trigger: 'blur' }
                        ],
                        DoorJe: [
                            { required: true, message: '请输入门槛金额', trigger: 'blur' }
                        ]
                    },
                    VIPReamrk: [{
                        Title: '',
                        Mx: ''
                    }, {
                        Title: '',
                        Mx: ''
                    }, {
                        Title: '',
                        Mx: ''
                    }]
                };
            },
            methods: {
                //文件上传后查看大图
                handlePictureCardPreview(file) {

                },
                //上传文件超过数量函数
                handleExceed(files, fileList) {
                    //this.$message.warning(`当前限制选择 1 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);
                },
                //上传前校验大小和类型函数
                beforeupload(file) {
                    this.GPT_Setup.PushImg = '';

                    let FileJson = file.name.split('.');
                    if (FileJson.length > 2) {
                        //文件非法
                        this.$message.warning(`文件非法，请检查文件名称是否包含多个扩展名`);
                        return false;
                    } else {
                        if (FileJson[1] === "png" || FileJson[1] === "PNG" || FileJson[1] === "jpg" || FileJson[1] === "JPG") {
                            const filesize = file.size / 1024 / 1024;
                            if (filesize > 15) {
                                this.$message.warning(`文件最多支持大小15M，当前文件大小${filesize}`);
                                return false;
                            }
                            return true;
                        } else {
                            this.$message.warning(`当前限制选择jpg、png文件，本次选择了 ${FileJson[1]} 文件`);
                            return false;
                        }
                    }
                },
                //上传成功回调
                TopicSuccess(response, file, fileList) {
                    if (response.CODE == 200) {
                        this.GPT_Setup.PushImg = response.DATA;
                        console.log(this.GPT_Setup.PushImg);
                    } else {
                        this.imagesfileList.splice(0, this.imagesfileList.length);
                        this.$message.warning(`上传失败！${response.MSG}`);
                    }
                },
                Update() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: that.GPT_Setup.ApiUrl + '/api/TimeKey',
                        data: that.GPT_Setup,
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.$message({
                            message: '更新成功',
                            type: 'success'
                        });
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                Get() {
                    const that = this;
                    axios({
                        method: 'post',
                        url: that.GPT_Setup.ApiUrl + '/api/TimeKey',
                        data: that.GPT_Setup,
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        //获取Key池
                        that.gridData = res;
                        that.dialogTableVisible = true;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                Submit(formName) {
                    const that = this;
                    this.$refs[formName].validate(function (valid) {
                        if (valid) {
                            axios({
                                method: 'put',
                                url: '/ChatGPT/Setup/Update',
                                data: that.GPT_Setup,
                                headers: {
                                    'Content-Type': 'application/json; charset=UTF-8'
                                },
                            }).then(function (res) {
                                that.$message({
                                    message: '更新成功',
                                    type: 'success'
                                });
                            }).catch(function (err) {
                                that.$message.error(err);
                            });
                        } else {
                            console.log('error submit!!');
                            return false;
                        }
                    })
                },
                GetFirst() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: '/ChatGPT/Setup/GetFirst',
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.GPT_Setup = res;
                        that.tabshow = true;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                }
            },
            created: function () {
                this.GetFirst();
            },
            mounted: function () {

            }
        })
    </script>
</body>
</html>
