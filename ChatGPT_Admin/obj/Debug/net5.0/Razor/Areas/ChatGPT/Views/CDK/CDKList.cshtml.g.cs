#pragma checksum "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\CDK\CDKList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4c00e62b0a591c2e22049896934ddc95495631bd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_ChatGPT_Views_CDK_CDKList), @"mvc.1.0.view", @"/Areas/ChatGPT/Views/CDK/CDKList.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4c00e62b0a591c2e22049896934ddc95495631bd", @"/Areas/ChatGPT/Views/CDK/CDKList.cshtml")]
    #nullable restore
    public class Areas_ChatGPT_Views_CDK_CDKList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\CDK\CDKList.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c00e62b0a591c2e22049896934ddc95495631bd2989", async() => {
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
    <!-- Element CSS -->
    <link rel=""stylesheet"" href=""/lib/Element/css/index.css"">
    <!-- 全局通用样式 -->
    <link rel=""stylesheet"" href=""/lib/css/style.css"" />
    <title></title>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c00e62b0a591c2e22049896934ddc95495631bd4322", async() => {
                WriteLiteral(@"
    <div id=""app"" v-cloak>
        <el-container>
            <el-header height=""40"">
                <div class=""SelectDiv"">
                    <div class=""InputContainer"">
                        <el-input v-model=""model.CDK"" placeholder=""搜索CDK"" clearable></el-input>
                    </div>
                    <div class=""InputContainer"">
                        <el-input v-model=""model.NikeName"" placeholder=""搜索兑换者昵称"" clearable></el-input>
                    </div>
                    <div class=""SelectContainerLager"">
                        <el-select v-model=""model.State"" placeholder=""结算状态"" style=""width:100%;"">
                            <el-option label=""全部"" :value=""-2""></el-option>
                            <el-option label=""已兑换"" :value=""1""></el-option>
                            <el-option label=""未兑换"" :value=""0""></el-option>
                        </el-select>
                    </div>
                    <div class=""ButtonContainer"">
                        <el-button t");
                WriteLiteral("ype=\"primary\" icon=\"el-icon-search\" ");
                WriteLiteral("@click=\"Select\">搜索</el-button>\r\n                    </div>\r\n                    <div class=\"ButtonContainer\">\r\n                        <el-button type=\"primary\" icon=\"el-icon-edit\" ");
                WriteLiteral("@click=\"Create\">添加</el-button>\r\n                    </div>\r\n                    <div class=\"ButtonContainer\">\r\n                        <el-button type=\"success\" icon=\"el-icon-edit\" ");
                WriteLiteral(@"@click=""LeadingOut"">导出</el-button>
                    </div>
                </div>
            </el-header>
            <el-main>
                <el-table :data=""tableData""
                          size=""mini""
                          border
                          max-height=""700""
                          row-key=""ID""
                          style=""width: 100%;min-height:650px;"">
                    <el-table-column prop=""ID""
                                     label=""ID""
                                     width=""50""
                                     align=""center"">
                    </el-table-column>
                    <el-table-column prop=""Stamp""
                                     label=""生成时间""
                                     width=""170"">
                    </el-table-column>
                    <el-table-column prop=""BigoTime""
                                     label=""兑换时间""
                                     width=""170"">
                        <templ");
                WriteLiteral(@"ate slot-scope=""scope"">
                            {{scope.row.State==1?scope.row.BigoTime:''}}
                        </template>
                    </el-table-column>
                    <el-table-column prop=""CDK""
                                     label=""兑换码"">
                    </el-table-column>
                    <el-table-column label=""状态""
                                     align=""center""
                                     width=""80"">
                        <template slot-scope=""scope"">
                            <el-tag :type=""scope.row.State==1?'success':'info'"">{{scope.row.State==1?'已兑换':'未兑换'}}</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column prop=""NikeName""
                                     label=""兑换者昵称""
                                     width=""150"">
                    </el-table-column>
                    <el-table-column prop=""Type""
                                     label=""类型""
   ");
                WriteLiteral(@"                                  width=""150"">
                        <template slot-scope=""scope"">
                            {{scope.row.Type==1?'次数':'会员'}}
                        </template>
                    </el-table-column>
                    <el-table-column prop=""Duration""
                                     label=""对应会员（月）""
                                     width=""120"">
                        <template slot-scope=""scope"">
                            {{scope.row.Type==0?scope.row.Duration+'（个月）':''}}
                        </template>
                    </el-table-column>
                    <el-table-column prop=""Free_Second""
                                     label=""对应次数""
                                     width=""80"">
                        <template slot-scope=""scope"">
                            {{scope.row.Type==1?scope.row.Free_Second+'（次）':''}}
                        </template>
                    </el-table-column>
                    <el-table-column fix");
                WriteLiteral("ed=\"right\"\r\n                                     label=\"操作\"\r\n                                     width=\"70\">\r\n                        <template slot-scope=\"scope\">\r\n                            <el-popconfirm title=\"确定提交删除么？\" ");
                WriteLiteral(@"@confirm=""Delete(scope.row.ID)"" style=""margin-left:10px;"">
                                <el-button type=""text"" size=""small"" slot=""reference"">删除</el-button>
                            </el-popconfirm>
                        </template>
                    </el-table-column>
                </el-table>
            </el-main>
            <el-footer>
                <el-pagination ");
                WriteLiteral("@size-change=\"handleSizeChange\"\r\n                               ");
                WriteLiteral(@"@current-change=""handleCurrentChange""
                               :current-page=""PageParams.PageNum""
                               :page-sizes=""PageParams.PageSizeList""
                               :page-size=""PageParams.PageSize""
                               layout=""total, sizes, prev, pager, next, jumper""
                               :total=""PageParams.Total""
                               style=""width:99%;"">
                </el-pagination>
            </el-footer>
            <el-dialog :title=""Dialog.Title"" :visible.sync=""Dialog.Show"">
                <el-form ref=""SubForm"" :model=""Form"" :label-width=""labelwidth"" :rules=""Rule"">
                    <el-form-item label=""兑换码类型"">
                        <el-radio v-model=""Form.Type"" :label=""0"">会员</el-radio>
                        <el-radio v-model=""Form.Type"" :label=""1"">次数</el-radio>
                    </el-form-item>
                    <el-form-item label=""兑换会员月数"" prop=""Duration"" v-if=""Form.Type==0"">
                        <el-");
                WriteLiteral(@"input-number v-model=""Form.Duration"" :max=""12""></el-input-number>
                    </el-form-item>
                    <el-form-item label=""兑换免费试用次数"" prop=""Free_Second"" v-else>
                        <el-input-number v-model=""Form.Free_Second"" :max=""500""></el-input-number>
                    </el-form-item>
                    <el-form-item>
                        <el-button type=""primary"" ");
                WriteLiteral(@"@click=""SubForm('SubForm')"">保存</el-button>
                    </el-form-item>
                    <el-form-item label=""批量添加数量"">
                        <el-input-number v-model=""Form.COUNT"" :min=""1"" :max=""500""></el-input-number>
                    </el-form-item>
                </el-form>
            </el-dialog>
        </el-container>
    </div>
    <script src=""/lib/Vue/vue.js""></script>
    <script src=""/lib/Element/js/index.js""></script>
    <script src=""/lib/axios/axios.js""></script>
    <script src=""/lib/Scripts/admin.js""></script>
    <script>
        new Vue({
            el: '#app',
            data: function () {
                return {
                    pickerOptions: {
                        shortcuts: [{
                            text: '最近一周',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() -");
                WriteLiteral(@" 3600 * 1000 * 24 * 7);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '最近一个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '最近三个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
                                picker.$emit('pick', [start, end]);
                            }
                        }]
                   ");
                WriteLiteral(@" },
                    tableData: [],
                    PageParams: {
                        PageSizeList: window.PageSizeList,
                        PageNum: 1,
                        PageSize: 10,
                        Total: 0
                    },
                    model: {
                        CDK: '',
                        NikeName: '',
                        State: -2
                    },
                    Dialog: {
                        Title: '',
                        Show: false,
                    },
                    labelwidth: '35%',
                    Form: {
                        ID: 0,
                        State: 0,
                        Type: 0,
                        Duration: 1,
                        Free_Second: 1,
                        COUNT: 1,
                    },
                    thisRow: {},
                    Rule: {
                        Duration: [
                            { required: true, message: ");
                WriteLiteral(@"'请输入对应会员时长', trigger: 'blur' }
                        ],
                        Free_Second: [
                            { required: true, message: '请输入对应次数', trigger: 'blur' }
                        ]
                    }
                };
            },
            methods: {
                //时间转换
                DateConvert(TimeStamp) {
                    var Time = new Date(TimeStamp);
                    var Year = Time.getFullYear();
                    var Month = Time.getMonth() + 1;
                    var Day = Time.getDate();
                    return Year + '-' + this.Supplement(Month) + '-' + this.Supplement(Day);
                },
                //时间零补位
                Supplement(TimeVal) {
                    return parseInt(TimeVal) < 10 ? '0' + TimeVal : TimeVal
                },
                //最近一个月(开始时间)
                SRecentTime() {
                    const start = new Date();
                    start.setTime(start.getTime() - 3600 * 1000 * 24 * ");
                WriteLiteral(@"30);
                    return start;
                },
                //最近一个月(结束时间)
                ERecentTime() {
                    const end = new Date();
                    return end;
                },
                Select() {
                    this.PageParams.pageNum = 1;
                    this.GetListPage();
                },
                Create() {
                    const MOD = this.$refs['SubForm'];
                    if (MOD) {
                        MOD.resetFields()
                    }
                    this.Dialog.Title = '添加';
                    this.Dialog.Show = true;
                },
                Edit(row) {
                    this.Dialog.Show = true;
                    this.$nextTick(() => {
                        const MOD = this.$refs['SubForm'];
                        if (MOD) {
                            MOD.resetFields()
                        }
                        this.thisRow = row;
                        this.Form");
                WriteLiteral(@" = JSON.parse(JSON.stringify(row));
                        this.Dialog.Title = '修改';
                    });
                },
                SubForm(formName) {
                    const that = this;
                    this.$refs[formName].validate(function (valid) {
                        if (valid) {
                            if (that.Dialog.Title == '添加') {
                                that.Add();
                            }
                        }
                    })
                },
                Add() {
                    const that = this;
                    console.log(that.Form);
                    axios({
                        method: 'post',
                        url: '/ChatGPT/CDK/Add?COUNT=' + this.Form.COUNT,
                        data: that.Form,
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
           ");
                WriteLiteral(@"             that.GetListPage();
                        that.$message({
                            message: '添加成功！' + res + '条',
                            type: 'success'
                        });
                        that.Dialog.Show = false;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                Delete(ID) {
                    const that = this;
                    axios({
                        method: 'Delete',
                        url: '/ChatGPT/CDK/Delete',
                        params: {
                            ID: ID
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.$message({
                            message: '删除成功！',
                            type: 'success'
      ");
                WriteLiteral(@"                  });
                        that.tableData.splice(that.tableData.findIndex(item => item.ID === ID), 1);
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                GetListPage() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: '/ChatGPT/CDK/GetListPage',
                        params: {
                            CommodityName: that.model.CommodityName,
                            PageNum: that.PageParams.PageNum,
                            PageSize: that.PageParams.PageSize,
                            State: that.model.State
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.tableData = res.DATA;
  ");
                WriteLiteral(@"                      that.PageParams.Total = res.DATACOUNT;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                    this.tableData;
                },
                LeadingOut() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: '/ChatGPT/CDK/LeadingOut',
                        params: {
                            CommodityName: that.model.CommodityName,
                            PageNum: that.PageParams.PageNum,
                            PageSize: that.PageParams.PageSize,
                            State: that.model.State
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        window.open(res);
                    }).catch(function ");
                WriteLiteral(@"(err) {
                        that.$message.error(err);
                    });
                },
                handleSizeChange(pageSize) {
                    //当前页数
                    this.PageParams.PageNum = 1;
                    //当前页最大值
                    this.PageParams.PageSize = pageSize;
                    this.GetListPage();
                },
                handleCurrentChange(pageNum) {
                    //当前页数
                    this.PageParams.PageNum = pageNum;
                    this.GetListPage();
                },
            },
            created: function () {
                this.GetListPage();
            },
            mounted: function () {

            }
        })
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
