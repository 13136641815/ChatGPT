#pragma checksum "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\Commodity\List.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eca52ee7ddc2805db254483c6146816200becc22"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_ChatGPT_Views_Commodity_List), @"mvc.1.0.view", @"/Areas/ChatGPT/Views/Commodity/List.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eca52ee7ddc2805db254483c6146816200becc22", @"/Areas/ChatGPT/Views/Commodity/List.cshtml")]
    #nullable restore
    public class Areas_ChatGPT_Views_Commodity_List : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\Commodity\List.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eca52ee7ddc2805db254483c6146816200becc223007", async() => {
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
    <!-- Element CSS -->
    <link rel=""stylesheet"" href=""/lib/Element/css/index.css"">
    <!-- 全局通用样式 -->
    <link rel=""stylesheet"" href=""/lib/css/style.css"" />
    <title></title>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eca52ee7ddc2805db254483c6146816200becc224340", async() => {
                WriteLiteral(@"
    <div id=""app"" v-cloak>
        <el-container>
            <el-header height=""40"">
                <div class=""SelectDiv"">
                    <div class=""InputContainer"">
                        <el-input v-model=""model.CommodityName"" placeholder=""商品名称"" clearable></el-input>
                    </div>
                    <div class=""ButtonContainer"">
                        <el-button type=""primary"" icon=""el-icon-search"" ");
                WriteLiteral("@click=\"Select\">搜索</el-button>\r\n                    </div>\r\n                    <div class=\"ButtonContainer\">\r\n                        <el-button type=\"primary\" icon=\"el-icon-edit\" ");
                WriteLiteral(@"@click=""Create"">添加</el-button>
                    </div>
                </div>
            </el-header>
            <el-main>
                <el-table :data=""tableData""
                          size=""mini""
                          border
                          max-height=""700""
                          row-key=""ID""
                          style=""width: 100%;min-height:650px;"">
                    <el-table-column prop=""ID""
                                     label=""ID""
                                     width=""50""
                                     align=""center"">
                    </el-table-column>
                    <el-table-column prop=""Stamp""
                                     label=""添加时间""
                                     width=""200"">
                    </el-table-column>
                    <el-table-column prop=""CommodityName""
                                     label=""商品名称"">
                    </el-table-column>
                    <el-table-column pr");
                WriteLiteral(@"op=""CommodityOriginalPrice""
                                     label=""原价""
                                     width=""100"">
                        <template slot-scope=""scope"">
                            {{Format(scope.row.CommodityOriginalPrice)}}
                        </template>
                    </el-table-column>
                    <el-table-column prop=""CommodityPresentPrice""
                                     label=""现价""
                                     width=""100"">
                        <template slot-scope=""scope"">
                            {{Format(scope.row.CommodityPresentPrice)}}
                        </template>
                    </el-table-column>
                    <el-table-column prop=""ShareCommission""
                                     label=""分佣比例""
                                     width=""80"">
                    </el-table-column>
                    <el-table-column prop=""Duration""
                                     label=""充值时长""
          ");
                WriteLiteral(@"                           width=""150"">
                        <template slot-scope=""scope"">
                            {{scope.row.Duration}}（个月）
                        </template>
                    </el-table-column>
                    <el-table-column prop=""Explain""
                                     label=""标签""
                                     width=""120"">
                        <template slot-scope=""scope"">
                            <el-tag type=""info"" effect=""plain"" size=""smarll"" v-if=""scope.row.Explain"">{{scope.row.Explain}}</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column label=""是否启用""
                                     align=""center""
                                     width=""70"">
                        <template slot-scope=""scope"">
                            <el-tag :type=""scope.row.Enable==1?'success':'danger'"">{{scope.row.Enable==1?'启用':'停用'}}</el-tag>
                        </template>
   ");
                WriteLiteral(@"                 </el-table-column>
                    <el-table-column label=""是否折扣""
                                     align=""center""
                                     width=""70"">
                        <template slot-scope=""scope"">
                            <el-tag :type=""scope.row.Discount==1?'':'info'"">{{scope.row.Discount==1?'折扣':'原价'}}</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column fixed=""right""
                                     label=""操作""
                                     width=""150"">
                        <template slot-scope=""scope"">
                            <el-button type=""text"" size=""small"" ");
                WriteLiteral("@click=\"Edit(scope.row)\">编辑</el-button>\r\n                            <el-popconfirm title=\"确定提交删除么？\" ");
                WriteLiteral(@"@confirm=""Delete(scope.row.ID)"" style=""margin-left:10px;"">
                                <el-button type=""text"" size=""small"" slot=""reference"">删除</el-button>
                            </el-popconfirm>
                        </template>
                    </el-table-column>
                </el-table>
            </el-main>
            <el-footer>
                <el-pagination ");
                WriteLiteral("@size-change=\"handleSizeChange\"\r\n                               ");
                WriteLiteral(@"@current-change=""handleCurrentChange""
                               :current-page=""PageParams.PageNum""
                               :page-sizes=""PageParams.PageSizeList""
                               :page-size=""PageParams.PageSize""
                               layout=""total, sizes, prev, pager, next, jumper""
                               :total=""PageParams.Total""
                               style=""width:99%;"">
                </el-pagination>
            </el-footer>
            <el-dialog :title=""Dialog.Title"" :visible.sync=""Dialog.Show"">
                <el-form ref=""SubForm"" :model=""Form"" :label-width=""labelwidth"" :rules=""Rule"">
                    <el-form-item label=""商品名称"" prop=""CommodityName"">
                        <el-input v-model=""Form.CommodityName""></el-input>
                    </el-form-item>
                    <el-form-item label=""是否启用"">
                        <el-radio v-model=""Form.Enable"" :label=""1"">启用</el-radio>
                        <el-radio v-model=""Form.");
                WriteLiteral(@"Enable"" :label=""0"">停用</el-radio>
                    </el-form-item>
                    <el-form-item label=""是否折扣"">
                        <el-radio v-model=""Form.Discount"" :label=""1"">是</el-radio>
                        <el-radio v-model=""Form.Discount"" :label=""0"">否</el-radio>
                    </el-form-item>
                    <el-form-item label=""商品原价"" prop=""CommodityOriginalPrice"">
                        <el-input-number v-model=""Form.CommodityOriginalPrice"" :min=""0.01"" :precision=""2"" :step=""0.01"" :max=""3000""></el-input-number>
                    </el-form-item>
                    <el-form-item label=""商品现价"" prop=""CommodityPresentPrice"">
                        <el-input-number v-model=""Form.CommodityPresentPrice"" :min=""0.01"" :precision=""2"" :step=""0.01"" :max=""3000""></el-input-number>
                    </el-form-item>
                    <el-form-item label=""所购时长（月）"" prop=""Duration"">
                        <el-input-number v-model=""Form.Duration"" :min=""1"" :max=""24""></el-input-number");
                WriteLiteral(@">
                    </el-form-item>
                    <el-form-item label=""分佣比例"" prop=""ShareCommission"">
                        <el-input-number v-model=""Form.ShareCommission""  :min=""0.01"" :precision=""2"" :step=""0.01"" :max=""1""></el-input-number>
                    </el-form-item>
                    <el-form-item label=""标签内容"">
                        <el-input v-model=""Form.Explain"" type=""textarea""
                                  :rows=""4""></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type=""primary"" ");
                WriteLiteral(@"@click=""SubForm('SubForm')"">保存</el-button>
                    </el-form-item>
                </el-form>
            </el-dialog>
        </el-container>
    </div>
    <script src=""/lib/Vue/vue.js""></script>
    <script src=""/lib/Element/js/index.js""></script>
    <script src=""/lib/axios/axios.js""></script>
    <script src=""/lib/Scripts/admin.js""></script>
    <script>
        new Vue({
            el: '#app',
            data: function () {
                return {
                    pickerOptions: {
                        shortcuts: [{
                            text: '最近一周',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '");
                WriteLiteral(@"最近一个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '最近三个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
                                picker.$emit('pick', [start, end]);
                            }
                        }]
                    },
                    tableData: [],
                    PageParams: {
                        PageSizeList: window.PageSizeList,
                        PageNum: 1,
                 ");
                WriteLiteral(@"       PageSize: 10,
                        Total: 0
                    },
                    model: {
                        CommodityName: ''
                    },
                    Dialog: {
                        Title: '',
                        Show: false,
                    },
                    labelwidth: '35%',
                    Form: {
                        ID: 0,
                        Stamp: '',
                        Enable: 1,
                        Discount: 1,
                        CommodityName: '',
                        CommodityOriginalPrice: 100,
                        CommodityPresentPrice: 68,
                        CommodityType: 0,
                        Duration: 1,
                        Explain: '',
                        ShareCommission:0.2
                    },
                    thisRow: {},
                    Rule: {
                        CommodityName: [
                            { required: true, message: '请输入商品名称'");
                WriteLiteral(@", trigger: 'blur' }
                        ],
                        CommodityOriginalPrice: [
                            { required: true, message: '请输入原价', trigger: 'blur' }
                        ],
                        CommodityPresentPrice: [
                            { required: true, message: '请输入现价', trigger: 'blur' }
                        ],
                        Duration: [
                            { required: true, message: '请输入会员期限', trigger: 'blur' }
                        ]
                    }
                };
            },
            methods: {
                //元转分
                YuanToFen(fen) {
                    var num = fen;
                    num = fen * 0.01;
                    num += '';
                    var reg = num.indexOf('.') > -1 ? /(\d{1,3})(?=(?:\d{3})+\.)/g : /(\d{1,3})(?=(?:\d{3})+$)/g;
                    num = num.replace(reg, '$1');
                    num = this.toDecimal2(num)
                    return num
          ");
                WriteLiteral(@"      },
                toDecimal2(x) {
                    var f = parseFloat(x);
                    if (isNaN(f)) {
                        return false;
                    }
                    var f = Math.round(x * 100) / 100;
                    var s = f.toString();
                    var rs = s.indexOf('.');
                    if (rs < 0) {
                        rs = s.length;
                        s += '.';
                    }
                    while (s.length <= rs + 2) {
                        s += '0';
                    }
                    return s;
                },
                //分转元
                FenToYuan(val) {
                    var str = (val / 100).toFixed(2) + '';
                    var intSum = str.substring(0, str.indexOf(""."")).replace(/\B(?=(?:\d{3})+$)/g, ',');//取到整数部分
                    var dot = str.substring(str.length, str.indexOf("".""))//取到小数部分搜索
                    var ret = intSum + dot;
                    return ret;
        ");
                WriteLiteral(@"        },
                //千位符函数
                Format(val) {
                    let num = this.FenToYuan(val);
                    return num;
                    //console.log(num);
                    //if (num) {
                    //    const Number = parseFloat(num).toFixed(2);
                    //    return Number.replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
                    //}
                    //else {
                    //    return '0.00';
                    //}
                },
                //时间转换
                DateConvert(TimeStamp) {
                    var Time = new Date(TimeStamp);
                    var Year = Time.getFullYear();
                    var Month = Time.getMonth() + 1;
                    var Day = Time.getDate();
                    return Year + '-' + this.Supplement(Month) + '-' + this.Supplement(Day);
                },
                //时间零补位
                Supplement(TimeVal) {
                    return parseInt(TimeVal) < 10 ? '0");
                WriteLiteral(@"' + TimeVal : TimeVal
                },
                //最近一个月(开始时间)
                SRecentTime() {
                    const start = new Date();
                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                    return start;
                },
                //最近一个月(结束时间)
                ERecentTime() {
                    const end = new Date();
                    return end;
                },
                Select() {
                    this.PageParams.pageNum = 1;
                    this.GetListPage();
                },
                Create() {
                    const MOD = this.$refs['SubForm'];
                    if (MOD) {
                        MOD.resetFields()
                    }
                    this.Dialog.Title = '添加';
                    this.Dialog.Show = true;
                },
                Edit(row) {
                    this.Dialog.Show = true;
                    this.$nextTick(() => {
                       ");
                WriteLiteral(@" const MOD = this.$refs['SubForm'];
                        if (MOD) {
                            MOD.resetFields()
                        }
                        this.thisRow = row;
                        this.Form = JSON.parse(JSON.stringify(row));
                        this.Form.CommodityOriginalPrice = (row.CommodityOriginalPrice / 100).toFixed(2);//分转元
                        this.Form.CommodityPresentPrice = (row.CommodityPresentPrice / 100).toFixed(2);//分转元
                        this.Dialog.Title = '修改';
                    });
                },
                SubForm(formName) {
                    const that = this;
                    this.$refs[formName].validate(function (valid) {
                        if (valid) {
                            if (that.Dialog.Title == '添加') {
                                that.Add();
                            } else {
                                that.Update();
                            }
                        }
        ");
                WriteLiteral(@"            })
                },
                Add() {
                    const that = this;
                    that.Form.CommodityOriginalPrice = that.Form.CommodityOriginalPrice * 100;
                    that.Form.CommodityPresentPrice = that.Form.CommodityPresentPrice * 100;
                    console.log(that.Form);
                    axios({
                        method: 'post',
                        url: '/ChatGPT/Commodity/Add',
                        data: that.Form,
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.tableData.push(res);
                        that.$message({
                            message: '添加成功！',
                            type: 'success'
                        });
                        that.Dialog.Show = false;
                    }).catch(function (err) {
                    ");
                WriteLiteral(@"    that.$message.error(err);
                    });
                },
                Update() {
                    const that = this;
                    that.Form.CommodityOriginalPrice = that.Form.CommodityOriginalPrice * 100;
                    that.Form.CommodityPresentPrice = that.Form.CommodityPresentPrice * 100;
                    axios({
                        method: 'put',
                        url: '/ChatGPT/Commodity/Update',
                        data: that.Form,
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.thisRow.Enable = that.Form.Enable;
                        that.thisRow.Discount = that.Form.Discount;
                        that.thisRow.CommodityName = that.Form.CommodityName;
                        that.thisRow.CommodityOriginalPrice = that.Form.CommodityOriginalPrice;
                     ");
                WriteLiteral(@"   that.thisRow.CommodityPresentPrice = that.Form.CommodityPresentPrice;
                        that.thisRow.CommodityType = that.Form.CommodityType;
                        that.thisRow.Duration = that.Form.Duration;
                        that.thisRow.Explain = that.Form.Explain;
                        that.thisRow.ShareCommission = that.Form.ShareCommission
                        that.$message({
                            message: '更新成功！',
                            type: 'success'
                        });
                        that.Dialog.Show = false;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                Delete(ID) {
                    const that = this;
                    axios({
                        method: 'Delete',
                        url: '/ChatGPT/Commodity/Delete',
                        params: {
                            ID: ID
                        }");
                WriteLiteral(@",
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.$message({
                            message: '删除成功！',
                            type: 'success'
                        });
                        that.tableData.splice(that.tableData.findIndex(item => item.ID === ID), 1);
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                GetListPage() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: '/ChatGPT/Commodity/GetListPage',
                        params: {
                            CommodityName: that.model.CommodityName,
                            PageNum: that.PageParams.PageNum,
                            PageSize: that.PageParam");
                WriteLiteral(@"s.PageSize,
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.tableData = res.DATA;
                        that.PageParams.Total = res.DATACOUNT;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                    this.tableData;
                },
                handleSizeChange(pageSize) {
                    //当前页数
                    this.PageParams.PageNum = 1;
                    //当前页最大值
                    this.PageParams.PageSize = pageSize;
                    this.GetListPage();
                },
                handleCurrentChange(pageNum) {
                    //当前页数
                    this.PageParams.PageNum = pageNum;
                    this.GetListPage();
                },
                CheckTime(Time) ");
                WriteLiteral(@"{
                    let DataTime = new Date(Time);
                    let TimeNow = new Date();
                    if (TimeNow > DataTime) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            created: function () {
                this.GetListPage();
            },
            mounted: function () {

            }
        })
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
