#pragma checksum "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\Setup\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0a978b21ddba3a92ba48afe48deb3ae943ed9d16"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_ChatGPT_Views_Setup_Index), @"mvc.1.0.view", @"/Areas/ChatGPT/Views/Setup/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0a978b21ddba3a92ba48afe48deb3ae943ed9d16", @"/Areas/ChatGPT/Views/Setup/Index.cshtml")]
    #nullable restore
    public class Areas_ChatGPT_Views_Setup_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\Setup\Index.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0a978b21ddba3a92ba48afe48deb3ae943ed9d162989", async() => {
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
    <!-- Element CSS -->
    <link rel=""stylesheet"" href=""/lib/Element/css/index.css"">
    <!-- 全局通用样式 -->
    <link rel=""stylesheet"" href=""/lib/css/style.css"" />
    <title></title>
    <style>
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0a978b21ddba3a92ba48afe48deb3ae943ed9d164349", async() => {
                WriteLiteral(@"
    <div id=""app"" v-cloak>
        <el-container class=""font"">
            <el-main>
                <el-card class=""box-card"" style=""width:50%;margin:0px auto;"">
                    <div slot=""header"" class=""clearfix"">
                        <span>
                            最后更新时间&nbsp;&nbsp;&nbsp;<el-tag>{{GPT_Setup.Stamp}}</el-tag>
                        </span>
                        <el-button style=""float: right; margin-left: 10px;"" type=""primary"" ");
                WriteLiteral("@click=\"Submit(\'form\')\" size=\"small\">保存</el-button>\r\n                        <el-button style=\"float: right;\" type=\"warning\" ");
                WriteLiteral("@click=\"Update\" size=\"small\">更新Key池缓存</el-button>\r\n                        <el-button style=\"float: right;\" type=\"success\" ");
                WriteLiteral(@"@click=""Get"" size=""small"">获取当前有效Key池缓存</el-button>
                    </div>
                    <div class=""text item"">
                        <el-form ref=""form"" :model=""GPT_Setup"" label-width=""170px"" :rules=""Rule"">
                            <el-form-item label=""移动端标题"" prop=""Title"">
                                <el-input v-model=""GPT_Setup.Title""></el-input>
                            </el-form-item>
                            <el-form-item label=""API接口地址"" prop=""ApiUrl"">
                                <el-input v-model=""GPT_Setup.ApiUrl""></el-input>
                            </el-form-item>
                            <el-form-item label=""新用户体验次数"" prop=""Free_Second"">
                                <el-input-number v-model=""GPT_Setup.Free_Second"" :min=""1"" :max=""500"" label=""免费次数""></el-input-number>
                            </el-form-item>
                            <el-form-item label=""佣金提现门槛金额"" prop=""DoorJe"">
                                <el-input-number v-model=""GPT_Setup.D");
                WriteLiteral(@"oorJe"" :min=""1"" :max=""3000"" label=""提现门槛金额""></el-input-number>
                            </el-form-item>
                            <el-form-item label=""分销说明"" prop=""CommissionRemark"">
                                <el-input type=""textarea""
                                          :rows=""8"" v-model=""GPT_Setup.CommissionRemark""></el-input>
                            </el-form-item>
                        </el-form>
                    </div>
                </el-card>
            </el-main>
        </el-container>
        <el-dialog title=""当前缓存中有效的Key池"" :visible.sync=""dialogTableVisible"" top=""5"">
            <el-table :data=""gridData"">
                <el-table-column property=""APIKEY"" label=""Key""></el-table-column>
                <el-table-column property=""i"" label=""轮询次数"" width=""200""></el-table-column>
            </el-table>
        </el-dialog>
    </div>
    <script src=""/lib/Vue/vue.js""></script>
    <script src=""/lib/Element/js/index.js""></script>
    <script src=""/lib/axios/ax");
                WriteLiteral(@"ios.js""></script>
    <script src=""/lib/Scripts/admin.js""></script>
    <script>
        new Vue({
            el: '#app',
            data: function () {
                return {
                    dialogTableVisible: false,
                    gridData: [],
                    GPT_Setup: {
                    },
                    Rule: {
                        Title: [
                            { required: true, message: '请输入移动端标题', trigger: 'blur' }
                        ],
                        ApiUrl: [
                            { required: true, message: '请输入API接口地址', trigger: 'blur' }
                        ],
                        Free_Second: [
                            { required: true, message: '请输入新用户体验次数', trigger: 'blur' }
                        ],
                        DoorJe: [
                            { required: true, message: '请输入门槛金额', trigger: 'blur' }
                        ]
                    }
                };
            },
      ");
                WriteLiteral(@"      methods: {
                Update() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: that.GPT_Setup.ApiUrl + '/ApiKeyCache',
                        data: that.GPT_Setup,
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.$message({
                            message: '更新成功',
                            type: 'success'
                        });
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                Get() {
                    const that = this;
                    axios({
                        method: 'post',
                        url: that.GPT_Setup.ApiUrl + '/ApiKeyCache',
                        data: that.GPT_Setup,
       ");
                WriteLiteral(@"                 headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        //获取Key池
                        that.gridData = res;
                        that.dialogTableVisible = true;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                Submit(formName) {
                    const that = this;
                    this.$refs[formName].validate(function (valid) {
                        if (valid) {
                            axios({
                                method: 'put',
                                url: '/ChatGPT/Setup/Update',
                                data: that.GPT_Setup,
                                headers: {
                                    'Content-Type': 'application/json; charset=UTF-8'
                                },
        ");
                WriteLiteral(@"                    }).then(function (res) {
                                that.$message({
                                    message: '更新成功',
                                    type: 'success'
                                });
                            }).catch(function (err) {
                                that.$message.error(err);
                            });
                        } else {
                            console.log('error submit!!');
                            return false;
                        }
                    })
                },
                GetFirst() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: '/ChatGPT/Setup/GetFirst',
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.GPT_Setup = res;");
                WriteLiteral(@"
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                }
            },
            created: function () {
                this.GetFirst();
            },
            mounted: function () {

            }
        })
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
