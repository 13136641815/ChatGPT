#pragma checksum "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\User\List.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a07c05b561cc4860cf0029ce90ac185f890e5748"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_ChatGPT_Views_User_List), @"mvc.1.0.view", @"/Areas/ChatGPT/Views/User/List.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a07c05b561cc4860cf0029ce90ac185f890e5748", @"/Areas/ChatGPT/Views/User/List.cshtml")]
    #nullable restore
    public class Areas_ChatGPT_Views_User_List : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\ChatGPT\ChatGPT\ChatGPT_Admin\Areas\ChatGPT\Views\User\List.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a07c05b561cc4860cf0029ce90ac185f890e57482977", async() => {
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
    <!-- Element CSS -->
    <link rel=""stylesheet"" href=""/lib/Element/css/index.css"">
    <!-- 全局通用样式 -->
    <link rel=""stylesheet"" href=""/lib/css/style.css"" />
    <title></title>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a07c05b561cc4860cf0029ce90ac185f890e57484310", async() => {
                WriteLiteral(@"
    <div id=""app"" v-cloak>
        <el-container>
            <el-header height=""40"">
                <div class=""SelectDiv"">
                    <div class=""InputContainer"">
                        <el-input v-model=""model.NikeName"" placeholder=""昵称"" clearable></el-input>
                    </div>
                    <div class=""DatePickContainer"">
                        <el-date-picker v-model=""model.Times""
                                        type=""daterange""
                                        align=""right""
                                        unlink-panels
                                        range-separator=""至""
                                        start-placeholder=""开始日期""
                                        end-placeholder=""结束日期""
                                        :picker-options=""pickerOptions""
                                        style=""width:410px;"">
                        </el-date-picker>
                    </div>
                    <div class=""S");
                WriteLiteral(@"electContainerMid"">
                        <el-select v-model=""model.YN_VIP"" placeholder=""用户身份"" style=""width:100%;"" clearable>
                            <el-option label=""会员"" :value=""1""></el-option>
                            <el-option label=""非会员"" :value=""0""></el-option>
                        </el-select>
                    </div>
                    <div class=""SelectContainerMid"">
                        <el-checkbox v-model=""model.BeOverdue"">查询过期会员</el-checkbox>
                    </div>
                    <div class=""ButtonContainer"">
                        <el-button type=""primary"" icon=""el-icon-search"" ");
                WriteLiteral(@"@click=""Select"">搜索</el-button>
                    </div>
                </div>
            </el-header>
            <el-main>
                <el-table :data=""tableData""
                          size=""mini""
                          border
                          max-height=""700""
                          row-key=""ID""
                          style=""width: 100%;min-height:650px;"">
                    <el-table-column prop=""ID""
                                     label=""ID""
                                     width=""50""
                                     align=""center"">
                    </el-table-column>
                    <el-table-column prop=""Stamp""
                                     label=""注册时间""
                                     width=""200"">
                    </el-table-column>
                    <el-table-column prop=""Tel""
                                     label=""手机号码""
                                     width=""200"">
                    </el-table-column>");
                WriteLiteral(@"
                    <el-table-column prop=""NikeName""
                                     label=""昵称""
                                     width=""180"">
                    </el-table-column>
                    <el-table-column prop=""WxOpenID""
                                     label=""微信标识openid"">
                    </el-table-column>
                    <el-table-column prop=""WxHeadUrl""
                                     label=""微信头像""
                                     width=""130""
                                     align=""center"">
                        <template slot-scope=""scope"">
                            <div style=""display:block;""><el-avatar shape=""square"" :src=""scope.row.WxHeadUrl""></el-avatar></div>
                        </template>
                    </el-table-column>
                    <el-table-column label=""VIP""
                                     align=""center""
                                     width=""70"">
                        <template slot-scope=""scope"">");
                WriteLiteral(@"
                            <el-tag :type=""scope.row.YN_VIP==1?'warning':'info'"">{{scope.row.YN_VIP==1?'是':'否'}}</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column prop=""BeOverdue_VIP""
                                     label=""VIP到期时间""
                                     width=""300"">
                        <template slot-scope=""scope"">
                            <div v-if=""scope.row.YN_VIP==1"">
                                <span style=""color:red;"" v-if=""CheckTime(scope.row.BeOverdue_VIP)"">{{scope.row.BeOverdue_VIP}}（已过期）</span>
                                <span v-else=""{{scope.row.BeOverdue_VIP}}""></span>
                            </div>

                        </template>
                    </el-table-column>
                    <el-table-column prop=""Free_Second""
                                     label=""剩余体验次数""
                                     width=""100"">
                    </el-table-column>
 ");
                WriteLiteral(@"                   <el-table-column fixed=""right""
                                     label=""操作""
                                     width=""150"">
                        <template slot-scope=""scope"">
                            <el-button type=""text"" size=""small"" ");
                WriteLiteral("@click=\"Edit(scope.row)\">编辑</el-button>\r\n                            <el-popconfirm title=\"确定提交删除么？\" ");
                WriteLiteral(@"@confirm=""Delete(scope.row.ID)"" style=""margin-left:10px;"">
                                <el-button type=""text"" size=""small"" slot=""reference"">删除</el-button>
                            </el-popconfirm>
                        </template>
                    </el-table-column>
                </el-table>
            </el-main>
            <el-footer>
                <el-pagination ");
                WriteLiteral("@size-change=\"handleSizeChange\"\r\n                               ");
                WriteLiteral(@"@current-change=""handleCurrentChange""
                               :current-page=""PageParams.PageNum""
                               :page-sizes=""PageParams.PageSizeList""
                               :page-size=""PageParams.PageSize""
                               layout=""total, sizes, prev, pager, next, jumper""
                               :total=""PageParams.Total""
                               style=""width:99%;"">
                </el-pagination>
            </el-footer>
            <el-dialog :title=""Dialog.Title"" :visible.sync=""Dialog.Show"">
                <el-form ref=""SubForm"" :model=""Form"" :label-width=""labelwidth"" :rules=""Rule"">
                    <el-form-item label=""用户ID"">
                        <el-input v-model=""Form.ID"" disabled></el-input>
                    </el-form-item>
                    <el-form-item label=""注册时间"">
                        <el-input v-model=""Form.Stamp"" disabled></el-input>
                    </el-form-item>
                    <el-form-item label");
                WriteLiteral(@"=""手机号码"">
                        <el-input v-model=""Form.Tel"" disabled></el-input>
                    </el-form-item>
                    <el-form-item label=""昵称"">
                        <el-input v-model=""Form.NikeName"" disabled></el-input>
                    </el-form-item>
                    <el-form-item label=""微信标识（openid）"">
                        <el-input v-model=""Form.WxOpenID"" disabled></el-input>
                    </el-form-item>
                    <el-form-item label=""微信头像地址"">
                        <div style=""display:block;""><el-avatar shape=""square"" :size=""50"" :src=""Form.WxHeadUrl""></el-avatar></div>
                    </el-form-item>
                    <el-form-item label=""VIP到期时间"">
                        <el-input v-model=""Form.BeOverdue_VIP"" disabled></el-input>
                    </el-form-item>
                    <el-form-item label=""剩余体验次数"" prop=""Free_Second"">
                        <el-input-number v-model=""Form.Free_Second"" :min=""1"" :max=""500""></el-input-nu");
                WriteLiteral("mber>\r\n                    </el-form-item>\r\n                    <el-form-item>\r\n                        <el-button type=\"primary\" ");
                WriteLiteral(@"@click=""SubForm('SubForm')"">保存</el-button>
                    </el-form-item>
                </el-form>
            </el-dialog>
        </el-container>
    </div>
    <script src=""/lib/Vue/vue.js""></script>
    <script src=""/lib/Element/js/index.js""></script>
    <script src=""/lib/axios/axios.js""></script>
    <script src=""/lib/Scripts/admin.js""></script>
    <script>
        new Vue({
            el: '#app',
            data: function () {
                return {
                    pickerOptions: {
                        shortcuts: [{
                            text: '最近一周',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '");
                WriteLiteral(@"最近一个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                                picker.$emit('pick', [start, end]);
                            }
                        }, {
                            text: '最近三个月',
                            onClick(picker) {
                                const end = new Date();
                                const start = new Date();
                                start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
                                picker.$emit('pick', [start, end]);
                            }
                        }]
                    },
                    tableData: [],
                    PageParams: {
                        PageSizeList: window.PageSizeList,
                        PageNum: 1,
                 ");
                WriteLiteral(@"       PageSize: 10,
                        Total: 0
                    },
                    model: {
                        YN_VIP: null,
                        Times: [this.SRecentTime(), this.ERecentTime()],//时间,
                        NikeName: '',
                        BeOverdue: false
                    },
                    Dialog: {
                        Title: '',
                        Show: false,
                    },
                    labelwidth: '35%',
                    Form: {
                        ID: 0,
                        Stamp: '',
                        Tel: 1,
                        NikeName: '',
                        WxOpenID: '',
                        WxHeadUrl: '',
                        YN_VIP: '',
                        BeOverdue_VIP: '',
                        Free_Second: '',
                    },
                    thisRow: {},
                    Rule: {
                        ApiKey: [
                            {");
                WriteLiteral(@" required: true, message: '请输入APIKEY', trigger: 'blur' }
                        ]
                    }
                };
            },
            methods: {
                //时间转换
                DateConvert(TimeStamp) {
                    var Time = new Date(TimeStamp);
                    var Year = Time.getFullYear();
                    var Month = Time.getMonth() + 1;
                    var Day = Time.getDate();
                    return Year + '-' + this.Supplement(Month) + '-' + this.Supplement(Day);
                },
                //时间零补位
                Supplement(TimeVal) {
                    return parseInt(TimeVal) < 10 ? '0' + TimeVal : TimeVal
                },
                //最近一个月(开始时间)
                SRecentTime() {
                    const start = new Date();
                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                    return start;
                },
                //最近一个月(结束时间)
                ERecentTime() {
  ");
                WriteLiteral(@"                  const end = new Date();
                    return end;
                },
                Select() {
                    this.PageParams.pageNum = 1;
                    this.GetListPage();
                },
                Edit(row) {
                    this.Dialog.Show = true;
                    this.$nextTick(() => {
                        const MOD = this.$refs['SubForm'];
                        if (MOD) {
                            MOD.resetFields()
                        }
                        this.thisRow = row;
                        this.Form = JSON.parse(JSON.stringify(row));
                        this.Dialog.Title = '修改';
                    });
                },
                SubForm(formName) {
                    const that = this;
                    this.$refs[formName].validate(function (valid) {
                        if (valid) {
                            if (that.Dialog.Title == '添加') {
                                that.Add()");
                WriteLiteral(@";
                            } else {
                                that.Update();
                            }
                        }
                    })
                },
                Update() {
                    const that = this;
                    axios({
                        method: 'put',
                        url: '/ChatGPT/User/Update',
                        data: that.Form,
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.thisRow.Free_Second = that.Form.Free_Second;
                        that.$message({
                            message: '更新成功！',
                            type: 'success'
                        });
                        that.Dialog.Show = false;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
");
                WriteLiteral(@"                },
                Delete(ID) {
                    const that = this;
                    axios({
                        method: 'Delete',
                        url: '/ChatGPT/User/Delete',
                        params: {
                            ID: ID
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(function (res) {
                        that.$message({
                            message: '删除成功！',
                            type: 'success'
                        });
                        that.tableData.splice(that.tableData.findIndex(item => item.ID === ID), 1);
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                },
                GetListPage() {
                    const that = this;
                    //开始时间
             ");
                WriteLiteral(@"       let TimeStart = '';
                    let TimeEnd = '';
                    if (that.model.Times.length > 0) {
                        TimeStart = that.DateConvert(that.model.Times[0]);
                        TimeEnd = that.DateConvert(that.model.Times[1]);
                    }
                    axios({
                        method: 'get',
                        url: '/ChatGPT/User/GetListPage',
                        params: {
                            YN_VIP: that.model.YN_VIP,
                            NikeName: that.model.NikeName,
                            TimeStart: TimeStart,
                            TimeEnd: TimeEnd,
                            BeOverdue: that.model.BeOverdue,
                            PageNum: that.PageParams.PageNum,
                            PageSize: that.PageParams.PageSize,
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                  ");
                WriteLiteral(@"      },
                    }).then(function (res) {
                        that.tableData = res.DATA;
                        that.PageParams.Total = res.DATACOUNT;
                    }).catch(function (err) {
                        that.$message.error(err);
                    });
                    this.tableData;
                },
                handleSizeChange(pageSize) {
                    //当前页数
                    this.PageParams.PageNum = 1;
                    //当前页最大值
                    this.PageParams.PageSize = pageSize;
                    this.GetListPage();
                },
                handleCurrentChange(pageNum) {
                    //当前页数
                    this.PageParams.PageNum = pageNum;
                    this.GetListPage();
                },
                CheckTime(Time) {
                    let DataTime = new Date(Time);
                    let TimeNow = new Date();
                    if (TimeNow > DataTime) {
                        r");
                WriteLiteral(@"eturn true;
                    } else {
                        return false;
                    }
                }
            },
            created: function () {
                this.GetListPage();
            },
            mounted: function () {

            }
        })
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
