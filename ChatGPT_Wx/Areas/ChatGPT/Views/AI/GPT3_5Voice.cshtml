@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="stylesheet" href="/lib/vant/css/index.css" />
    <link href="/ChatGPT_Wx/Style.css" rel="stylesheet" />
    <link href="/ChatGPT_Wx/Css/prism.css" rel="stylesheet" />
    @*<script src="/lib/eruda/eruda.min.js"></script>
        <script>eruda.init();</script>*@
    <style>
        .scroll-container {
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
        }

        html {
            background-color: #FFFFFF;
        }
    </style>
    <style>
        .div_AI {
            margin: 8px;
            float: left;
            width: 98%;
        }

        .AI_Img {
            width: 40px;
            height: 40px;
            float: left;
        }

        .AI_Msg {
            max-width: 80%;
            float: left;
            /* min-width: 20%;*/
        }

        .AIPopou {
            max-width: 80%;
            float: left;
            min-width: 20%;
        }

        .AIsquare {
            position: relative;
            background: #f4f4f5;
            margin-left: 10px;
            padding: 10px;
            border-radius: 5px;
        }

        .AItriangle {
            z-index: -10;
            position: absolute;
            top: 5px;
            left: -20px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 5px;
            border-right-width: 20px;
            border-color: transparent #ededed transparent transparent;
            font-size: 0;
            line-height: 0;
        }

        .text {
            text-indent: 1em;
            line-height: 24px;
            font-size: 15px;
            margin: 0;
            width: 100%;
            word-wrap: break-word;
            margin-top: 7px;
            margin-bottom: 7px;
            margin-right: 10px;
        }
    </style>
    <style>
        .div_Player {
            margin: 8px;
            float: right;
            width: 80%;
        }

        .Player_Msg {
            max-width: 100%;
            margin-right: 23px;
            float: right;
        }

        .POsquare {
            position: relative;
            background-color: #1989fa;
            padding: 10px;
            color: #fff;
            border-radius: 5px;
            width: 100%;
        }

        .POtriangle {
            z-index: -10;
            position: absolute;
            top: 5px;
            right: -17px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 5px;
            border-left-width: 20px;
            border-color: transparent transparent transparent #1989fa;
            font-size: 0;
            line-height: 0;
        }

        .AIsquare .potext {
            color: #606266;
        }

        .potext {
            line-height: 28px;
            font-size: 16px;
            margin: 0;
            width: 100%;
            word-wrap: break-word;
            max-width: 100%;
            min-width: 28px;
            text-align: left;
            /*white-space: pre-wrap;*/
        }

        .van-image--round img {
            background-color: #1989fa;
        }

        .van-cell__value--alone {
            height: 40px;
        }

        .van-slider {
            width: 95%;
        }

        code {
            white-space: normal;
        }
    </style>
    <style>
        .bottom {
            position: fixed;
            width: 100%;
            height: 60px;
            bottom: 49px;
            background-color: rgb(255 255 255);
            box-shadow: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04);
        }
        .notice-swipe {
            height: 40px;
            line-height: 40px;
        }
    </style>
</head>

<body>
    <div id="app" v-cloak>
        <div id="scroll" style="width: 100%; float: left; max-height: 100%;" class="scroll-container">
            <van-notice-bar left-icon="volume-o" mode="closeable" :text="setup.Notice">
                <van-swipe vertical
                           class="notice-swipe"
                           :autoplay="15000"
                           :show-indicators="false">
                    <van-swipe-item v-for="(item,index) in Notice" :key="index">{{item}}</van-swipe-item>
                </van-swipe>
                    
            </van-notice-bar>
            <van-divider style="margin-top: 10px; margin-bottom: 5px; font-size: 10px; color: #ceccca;">您正在使用OpenAI官方【{{Bot.Name}}】</van-divider>
            <div class="div_AI">
                <div class="AI_Img">
                    <van-image round
                               width="100%"
                               height="100%"
                               :src="Bot.Img"></van-image>
                </div>
                <div class="AI_Msg">
                    <div class="AIsquare">
                        @*<p class="AItriangle"></p>*@
                        <div style="max-width: 100%; min-width: 28px;">
                            <div class="potext">{{Bot.Greetings}}</div>
                        </div>
                    </div>
                    <van-icon name="volume-o" style="margin-left:20px;margin-top:5px;" @@click="read(Bot.Greetings)"></van-icon>
                    <van-icon name="description" style="margin-top: 5px; float: right;" @@click="copy(Bot.Greetings)"></van-icon>
                </div>
            </div>
            <div v-for="(item,index) in messages" :key="index">
                <div class="div_Player" v-if="item.role=='user'">
                    <div class="Player_Msg">
                        <div class="POsquare">
                            @*<p class="POtriangle"></p>*@
                            <div class="potext">
                                {{item.content}}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="div_AI" v-if="item.role=='assistant'">
                    <div class="AI_Img">
                        <van-image round
                                   width="100%"
                                   height="100%"
                                   :src="Bot.Img"></van-image>
                    </div>
                    <div class="AI_Msg">
                        <div class="AIsquare">
                            @*<p class="AItriangle"></p>*@
                            <div style="max-width: 100%; min-width: 28px;">
                                <van-loading color="#000000" style="display: inline; line-height: 24px; margin-left: 7px;" size="16px" v-if="item.content==='loding'">
                                </van-loading>
                                <div class="potext" v-else style="white-space: pre-wrap;">{{item.content}}</div>
                            </div>
                        </div>
                        <van-icon name="volume-o" style="margin-left:20px;margin-top:5px;" @@click="read(item.content)" v-show="item.content!='loding'"></van-icon>
                        <van-icon name="description" style="margin-top: 5px; float: right;" @@click="copy(item.content)" v-show="item.content!='loding'"></van-icon>
                    </div>
                </div>
            </div>
            <div class="bottom">
                <div class="van-cell van-cell--center van-field">
                    <div class="van-cell__value van-cell__value--alone van-field__value">
                        <div class="van-field__body">
                            <van-button :icon="switchicon" size="small" style="font-size: 15px; border-radius: 50px; margin-right: 5px;"
                                        @@click="switchCh">
                            </van-button>
                            <input type="text" v-show="!Voice" placeholder="请输入您想咨询的问题" class="van-field__control"
                                   v-model="text" style="background-color: #fff; height: 32px; height: 40px;padding-left: 15px; " />
                            <button type="button" id="bt_recoding" class="van-button van-button--default van-button--normal van-button--plain"
                                    style="height: 32px; height: 40px; width: 85%;" v-show="Voice">
                                {{VoiceText}}
                            </button>
                            <div class="van-field__button">
                                <van-popover v-model="showPopover" trigger="click" :actions="actions"
                                             @@select="onSelect" placement="top-end">
                                    <template #reference>
                                        <van-button size="small" type="info" icon="bars" plain>
                                            菜单
                                        </van-button>
                                    </template>
                                </van-popover>
                                <transition name="van-slide-right">
                                    <van-button size="small" type="info" style="width: 62px;"
                                                icon="share" v-show="SendButVisible" :loading="ButLoding" @@click="Send">
                                        发送
                                    </van-button>
                                </transition>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="height:110px;width:100%;float:left;"></div>
        </div>
        <van-popup v-model="Speak.show" position="top" :style="{ height:'240px' }">
            <van-cell>
                <!-- 使用 title 插槽来自定义标题 -->
                <template>
                    <span class="custom-title">语速</span>
                    <van-slider v-model="Speak.rate" :max="10" :min="0.1" :step="0.5"></van-slider>
                </template>
            </van-cell>
            <van-cell>
                <!-- 使用 title 插槽来自定义标题 -->
                <template>
                    <span class="custom-title">音调</span>
                    <van-slider v-model="Speak.pitch" :max="2" :min="0" :step="0.1"></van-slider>
                </template>
            </van-cell>
            <van-cell>
                <!-- 使用 title 插槽来自定义标题 -->
                <template>
                    <span class="custom-title">音量</span>
                    <van-slider v-model="Speak.volume" :max="1" :min="0" :step="0.1"></van-slider>
                </template>
            </van-cell>
            <van-cell style="text-align:center;">
                <!-- 使用 title 插槽来自定义标题 -->
                <template style="text-align:center;">
                    <van-checkbox v-model="Speak.checked" shape="square">自动朗读</van-checkbox>
                </template>
            </van-cell>
        </van-popup>
    </div>
</body>
<!-- 引入 Vue 和 Vant 的 JS 文件 -->
<script src="/ChatGPT_Wx/Global.js"></script>
<script src="/ChatGPT_Wx/Script/script.js"></script>
<script src="/lib/signalr/signalr.min.js"></script>
<script src="/ChatGPT_Wx/Script/recorder.js"></script>
<script src="/ChatGPT_Wx/Script/prism.js"></script>
<script>
    Prism.highlightAll();
    // 在 #app 标签下渲染一个按钮组件
    window.MyVue = new Vue({
        el: '#app',
        data: {
            Speak: {
                show: false,
                rate: 1,//语速
                pitch: 1,//音调
                volume: 1,//音量
                checked: true
            },
            ButLoding: false,//发送按钮loding
            SendButVisible: false,//文本框有文字后展示发送按钮
            text: '',
            context: [],
            messages: [],
            showPopover: false,
            actions: [{ text: '重启话题' }, { text: '朗读设置' }],
            connection: null,
            NowContext: {},
            Bot: {
                Name: '通用模型',
                ID: 0,
                Greetings: '你好！我是最强人工智能ChatGPT 3.5，我能回答你的所有问题，请和我聊天吧。',
                Img: '/ChatGPT_Wx/Img/ChatGPT.png'
            },
            scroll: null,
            setup: {},
            Notice:[],
            /////////////////////////////
            switchicon: 'volume',
            VoiceText: '按住 说话',
            Voice: false,
            First: true,//首次切换
            readFirst: true,//首次朗读
            ////////////////////////////
        },
        methods: {
            async GetBot(ID) {
                return await AxiosPromise('/ChatGPT/AI/GetBot', 'get', {
                    ID: ID
                }, false);
            },
            copy(content) {
                const copyToClipboard = str => {
                    if (navigator && navigator.clipboard && navigator.clipboard.writeText)
                        return navigator.clipboard.writeText(str);
                    return Promise.reject('The Clipboard API is not available.');
                };
                copyToClipboard(content);
                vant.Notify({ type: 'success', message: '已复制' });
            },
            read(val) {
                window.speechSynthesis.cancel();
                let speaker = new window.SpeechSynthesisUtterance();
                speaker.pitch = this.Speak.pitch;
                speaker.volume = this.Speak.volume;
                speaker.rate = this.Speak.rate;
                speaker.text = val;
                window.speechSynthesis.speak(speaker);
            },
            async contion() {
                vant.Toast.loading({
                    message: 'AI服务链接中...',
                    forbidClick: true,
                    duration: 0,
                    forbidClick: true
                });
                //获取API地址，然后创建连接
                try {
                    let res = await AxiosPromise('/ChatGPT/AI/GetAPI_Url', 'get', {}, true);
                    const that = this;
                    that.setup = res;
                    that.Notice = res.Notice.split('|')
                    that.connection = new signalR.HubConnectionBuilder().withUrl(res.ApiUrl + '/chatHub3_5').build();
                    that.connection.on("ReceiveMessage", function (botID, message) {
                        if (that.NowContext.content === 'loding') {
                            that.NowContext.content = message.replace(/[\r\n]/g, "");
                            console.log(that.NowContext.content);
                        } else {
                            that.NowContext.content = that.NowContext.content += message;
                        }
                        setTimeout(() => {
                            SmoothVerticalScrolling(that.scroll, 500, "center");
                        }, 200);
                    });
                    that.connection.on("EndMessage", function (botID, message) {
                        setTimeout(() => {
                            if (that.Speak.checked) {
                                that.read(that.NowContext.content);
                            }
                            SmoothVerticalScrolling(that.scroll, 500, "center");
                        }, 200);
                    });
                    that.connection.on("ErrMessage", function (botID, message) {
                        vant.Dialog.confirm({
                            title: '异常',
                            message: '老外服务器不给力：' + message,
                            confirmButtonText: '再试试',
                            cancelButtonText: '忍了',
                        }).then(() => {
                            // on confirm
                            let Test = that.messages[that.messages.length - 2].content;
                            that.messages.pop();
                            that.messages.pop();
                            that.text = Test;
                            that.Send();
                        }).catch(() => {
                            // on cancel
                            that.messages.pop();
                            that.messages.pop();
                        });
                        setTimeout(() => {
                            SmoothVerticalScrolling(that.scroll, 500, "center");
                        }, 200);
                    });
                    that.connection.start().then(function () {
                        //连接成功
                        vant.Toast.clear();
                    }).catch(function (err) {
                        return console.error(err.toString());
                    });
                } catch (err) {
                    vant.Toast.fail(err);
                }
            },
            //气泡选择事件
            onSelect(val) {
                if (val.text === '重启话题') {
                    this.messages = [];
                } else if (val.text === '朗读设置') {
                    this.Speak.show = true;
                }
            },
            Signalr(sendMsg, context) {
                this.connection.invoke("SendMessage", this.Bot.ID, sendMsg).catch(function (err) {
                    console.error(err);
                    vant.Dialog.confirm({
                        title: '异常',
                        message: '链接异常断开',
                        confirmButtonText: '重连',
                        showCancelButton: false
                    }).then(() => {
                        window.location.reload();
                    }).catch(() => {
                        // on cancel
                    });
                });
                this.NowContext = context;
            },
            async Send() {
                if (this.readFirst) {
                    this.readFirst = false;
                    this.read('');
                }
                if (!this.text) {
                    vant.Notify({ type: 'warning', message: '内容不得为空' });
                    return;
                }
                //先校验权限是否允许发送
                let formData = new FormData();
                formData.append('Text', this.text);
                try {
                    await AxiosPromise('/ChatGPT/AI/Check', 'post', formData, true);
                    let msg = document.getElementById('scroll'); // 获取对象
                    //调用请求
                    this.messages.push({
                        role: "user",
                        content: this.text
                    });//发送用户的输入
                    let Messages = JSON.stringify(this.messages);
                    let context = {
                        role: "assistant",
                        content: 'loding'
                    };//为了后期修改，做浅拷贝
                    this.Signalr(Messages, context);
                    this.text = '';//清空文本框
                    this.messages.push(context);//发送AI的咯顶
                    setTimeout(() => {
                        SmoothVerticalScrolling(msg, 500, "center");
                    }, 200);
                } catch (err) {
                    if (err.indexOf('会员') != -1) {
                        //会员充值提示
                        vant.Dialog.confirm({
                            title: '提示',
                            message: err,
                            confirmButtonText: '开通会员',
                            cancelButtonText: '取消',
                        }).then(() => {
                            parent.window.HomeVue.HomeHref('/ChatGPT/Pay/PayMember');
                        }).catch(() => {
                            // on cancel
                        });
                    } else {
                        //敏感词
                        vant.Dialog.alert({
                            title: '提示',
                            message: err,
                        }).then(() => {
                            // on close
                        });
                    }
                }
            },
            //切换输入模式
            switchCh() {
                if (this.First) {
                    this.First = false;
                    Start();
                    setTimeout(function () {
                        Stop();
                        this.isConsentMedia = true;
                    }, 1000)
                }
                if (this.Voice) {
                    this.Voice = false;
                    this.switchicon = 'volume';
                } else {
                    this.Voice = true;
                    this.switchicon = 'records';
                }
            },
        },
        watch: {
            text(val) {
                if (val) {
                    this.SendButVisible = true
                } else {
                    this.SendButVisible = false
                }
            },
        },
        created() {

        },
        async mounted() {
            this.scroll = document.getElementById('scroll'); // 获取对象
            await this.contion();
            var parms = getURLParams();
            let botID = 0;
            if (parms.botID) {
                botID = parms.botID;
            }
            this.Bot = await this.GetBot(botID);
        }
    });
    function SmoothVerticalScrolling(e, time, where) {
        var eTop = where == "top" ? (e.getBoundingClientRect().top < 2000 ? e.getBoundingClientRect().top - 1000 : e.getBoundingClientRect().top) : (e.getBoundingClientRect().bottom > 2000 ? e.getBoundingClientRect().bottom + 1000 : e.getBoundingClientRect().bottom);
        var eAmt = eTop / 100;
        var curTime = 0;
        while (curTime <= time) {
            window.setTimeout(SVS_B, curTime, eAmt, where);
            curTime += time / 100;
        }
    }
    function SVS_B(eAmt, where) {
        window.scrollBy(0, eAmt);
    }
</script>
<script>
    var recorder;
    function isIE() { //ie?
        if (!!window.ActiveXObject || "ActiveXObject" in window)
            return true;
        else
            return false;
    }
    let times = 0;

    var Start = function () {
        recorder = new Recorder({
            sampleBits: 16, // 采样位数，支持 8 或 16，默认是16
            sampleRate: 16000, // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000
            numChannels: 1, // 声道，支持 1 或 2， 默认是1
            compiling: false, // 是否边录边转换，默认是false
        });
        if (isIE()) {
            alert("ie不支持麦克风录音，请更换浏览器！");
            vant.Toast.clear();
        } else {
            recorder.start().then(() => {
                times = 0;
                //Length();
                //Loud();
                // 开始录音
            }, (error) => {
                // 出错了
                console.log(`${error.name} : ${error.message}`);
            });
        }
    }
    var Stop = function () {
        PlayDur();
        recorder.stop();
    }
    var Length = function () {
        recorder.onprogress = function (params) {
            //var id = document.getElementById("len");
            times = params.duration.toFixed(2);
            console.log(66, times);
            //id.innerHTML = "录音时长：" + params.duration.toFixed(2);
            //var idx = document.getElementById("loud");
            //idx.innerHTML = "音量大小：" + params.vol.toFixed(0) + "%";
            // microphone.volume("Microphone", params.vol);
        }
    }
    var Play = function () {
        recorder.play();
    }
    var PlayDur = function () {
        times = recorder.duration.toFixed(2);
        //var id = document.getElementById("playTiem");
        //id.innerHTML = "音频总时长" + recorder.duration;
        //setInterval(function () {
        //    var idx = document.getElementById("playTime");
        //    idx.innerHTML = "播放进度" + recorder.getPlayTime();
        //}, 1000)
    }
    function PlayV(key, times) {
        try {
            const obj = JsonFind(key);
            obj.value.play();
            const el = $("#" + key);
            el.addClass('playing');
            setTimeout(function () {
                el.removeClass('playing');
            }, Number(times) * 1000);
        } catch (e) {
            vant.Toast('历史语音不可播放');
        }

    }
    var bt_recoding = document.getElementById("bt_recoding");
    initEvent();
    let no = 0;
    let VoiceArry = [];
    function initEvent() {
        bt_recoding.addEventListener("touchstart", function (event) {
            Start();//开始录音
            event.preventDefault();//阻止浏览器默认行为
            posStart = 0;
            posStart = event.touches[0].pageY;//获取起点坐标
            times = 0;
            console.log("开始按下：" + posStart);
            //显示正在录制
            vant.Toast.clear();
            vant.Toast.loading({
                message: '录制中，手指上滑取消发送',
                forbidClick: true,
                duration: 0
            });
            window.MyVue.VoiceText = "松开 结束";
        });
        bt_recoding.addEventListener("touchmove", function (event) {
            event.preventDefault();//阻止浏览器默认行为
            posMove = event.targetTouches[0].pageY;//获取滑动实时坐标
            if (posStart - posMove < 200) {
                console.log("隐藏取消");
                vant.Toast.clear();
                vant.Toast.loading({
                    message: '录制中，手指上滑取消发送',
                    forbidClick: true,
                    duration: 0
                });
                window.MyVue.VoiceText = "松开 结束";
                //隐藏录音 显示暂停
            } else {
                console.log("显示取消");
                vant.Toast.clear();
                vant.Toast({
                    message: '松开取消发送',
                    icon: 'close',
                    duration: 0
                });
                //显示录音 隐藏暂停
            }
        });
        bt_recoding.addEventListener("touchend", function (event) {
            Stop();//结束录音
            console.log("松开");
            event.preventDefault(); //阻止浏览器默认行为
            posEnd = 0;
            posEnd = event.changedTouches[0].pageY;//获取终点坐标
            window.MyVue.VoiceText = "按下 说话";
            if (posStart - posEnd < 200) {
                if (times < 1) {
                    vant.Toast.clear();
                    vant.Toast({
                        message: '录音时间太短',
                        icon: 'fail',
                        duration: 2000
                    });
                    return;
                }
                //调用API发送，并将音频存储到变量中，以便播放
                let wavBlob = recorder.getWAVBlob()
                let renameFile = new File([wavBlob], '文件名.pcm', { type: 'audio/wav' });
                let form = new FormData();
                form.append("formFiles", wavBlob, "recorder.wav");
                vant.Toast.clear();
                AxiosAsync(window.MyVue.apiUrl + '/api/Values', 'post', form).then(res => {
                    //res文字，发送到页面上
                    window.MyVue.text = res;
                    window.MyVue.Send();
                }).catch(err => {
                    console.error(err);
                });
            } else {
                vant.Toast.clear();
                vant.Toast({
                    message: '发送已取消',
                    icon: 'fail',
                    duration: 2000
                });
            }
        });
    }
    function JsonFind(key) {
        console.log(VoiceArry);
        var queryData = VoiceArry.filter(function (_data) {
            return _data.key == key
        });
        return queryData[0];
    }
</script>
</html>