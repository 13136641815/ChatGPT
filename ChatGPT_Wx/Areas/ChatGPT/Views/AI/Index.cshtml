@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="stylesheet" href="/lib/vant/css/index.css" />
    <link href="/ChatGPT_Wx/Style.css" rel="stylesheet" />
    <style>
        .scroll-container {
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
        }

        html {
            background-color: #FFFFFF;
        }
    </style>
    <style>
        .div_AI {
            margin: 8px;
            float: left;
            width: 98%;
        }

        .AI_Img {
            width: 40px;
            height: 40px;
            float: left;
        }

        .AI_Msg {
            max-width: 80%;
            float: left;
            /* min-width: 20%;*/
        }

        .AIPopou {
            max-width: 80%;
            float: left;
            min-width: 20%;
        }

        .AIsquare {
            position: relative;
            background: #ededed;
            margin-left: 20px;
            padding: 5px;
            border-radius: 5px;
        }

        .AItriangle {
            z-index: -10;
            position: absolute;
            top: 5px;
            left: -20px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 5px;
            border-right-width: 20px;
            border-color: transparent #ededed transparent transparent;
            font-size: 0;
            line-height: 0;
        }

        .text {
            text-indent: 1em;
            line-height: 24px;
            font-size: 15px;
            margin: 0;
            width: 100%;
            word-wrap: break-word;
            margin-top: 7px;
            margin-bottom: 7px;
            margin-right: 10px;
        }
    </style>
    <style>
        .div_Player {
            margin: 8px;
            float: right;
            width: 80%;
        }

        .Player_Msg {
            max-width: 100%;
            margin-right: 23px;
            float: right;
        }

        .POsquare {
            position: relative;
            background-color: #1989fa;
            padding: 5px;
            color: #fff;
            border-radius: 5px;
            width: 100%;
        }

        .POtriangle {
            z-index: -10;
            position: absolute;
            top: 5px;
            right: -17px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 5px;
            border-left-width: 20px;
            border-color: transparent transparent transparent #1989fa;
            font-size: 0;
            line-height: 0;
        }

        .potext {
            line-height: 24px;
            font-size: 15px;
            margin: 0;
            width: 100%;
            word-wrap: break-word;
            max-width: 100%;
            min-width: 28px;
            text-align: left;
            /*white-space: pre-wrap;*/
        }
    </style>
    <style>
        .bottom {
            position: fixed;
            width: 100%;
            height: 60px;
            background-color: #f3f3f3;
            bottom: 50px;
        }
    </style>
</head>

<body>
    <div id="app" v-cloak>
        <div id="scroll" style="width: 100%; float: left; max-height: 100%;" class="scroll-container">
            <div class="div_AI">
                <div class="AI_Img">
                    <van-image width="100%"
                               height="100%"
                               src="/ChatGPT_Wx/Img/ChatGPT.png"></van-image>
                </div>
                <div class="AI_Msg">
                    <div class="AIsquare">
                        <p class="AItriangle"></p>
                        <div style="max-width: 100%; min-width: 28px;">
                            <div class="potext">你好！我是最强人工智能ChatGPT，我能回答你的所有问题，请和我聊天吧。</div>
                        </div>
                    </div>
                </div>
            </div>
            <div v-for="(item,index) in context" :key="index">
                <div class="div_Player" v-if="item.question">
                    <div class="Player_Msg">
                        <div class="POsquare">
                            <p class="POtriangle"></p>
                            <div class="potext">
                                {{item.question}}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="div_AI" v-if="item.answer">
                    <div class="AI_Img">
                        <van-image width="100%"
                                   height="100%"
                                   src="/ChatGPT_Wx/Img/ChatGPT.png"></van-image>
                    </div>
                    <div class="AI_Msg">
                        <div class="AIsquare">
                            <p class="AItriangle"></p>
                            <div style="max-width: 100%; min-width: 28px;">
                                <van-loading color="#000000" style="display: inline; line-height: 24px; margin-left: 7px;" size="16px" v-if="item.answer==='loding'">
                                </van-loading>
                                <div class="potext" v-else style="white-space: pre-wrap">{{item.answer}}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bottom">
                <div class="van-cell van-cell--center van-field" style="background-color: #f3f3f3;">
                    <div class="van-cell__value van-cell__value--alone van-field__value">
                        <div class="van-field__body">
                            <input type="text" placeholder="请输入您想咨询的问题" class="van-field__control"
                                   v-model="text" style="background-color: #fff; height: 32px; height: 40px;padding-left: 15px; " />
                            <div class="van-field__button">
                                <van-popover v-model="showPopover" trigger="click" :actions="actions"
                                             @@select="onSelect" placement="top-end">
                                    <template #reference>
                                        <van-button size="small" type="info" icon="bars" plain>
                                            菜单
                                        </van-button>
                                    </template>
                                </van-popover>
                                <transition name="van-slide-right">
                                    <van-button size="small" type="info" style="width: 62px;"
                                                icon="share" v-show="SendButVisible" :loading="ButLoding" @@click="Send">
                                        发送
                                    </van-button>
                                </transition>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="height:110px;width:100%;float:left;"></div>
        </div>
    </div>
</body>
<!-- 引入 Vue 和 Vant 的 JS 文件 -->
<script src="/lib/vue/vue.js"></script>
<script src="/lib/vant/js/vant.js"></script>
<script src="/lib/axios/axios.js"></script>
@*<script src="/ChatGPT_Wx/Script/script.js"></script>*@
<script>
    // 在 #app 标签下渲染一个按钮组件
    new Vue({
        el: '#app',
        data: {
            ButLoding: false,//发送按钮loding
            SendButVisible: false,//文本框有文字后展示发送按钮
            text: '',
            context: [],
            showPopover: false,
            actions: [{ text: '重启话题' }],
        },
        methods: {
            //气泡选择事件
            onSelect(val) {
                if (val.text === '重启话题') {
                    this.context = [];
                }
            },
            Send() {
                if (!this.text) {
                    vant.Notify({ type: 'warning', message: '内容不得为空' });
                    return;
                }

                this.ButLoding = true;
                let msg = document.getElementById('scroll'); // 获取对象
                //调用请求
                let text = this.text;
                this.text = '';
                let Body = {
                    prompt: text,
                    history : JSON.parse(JSON.stringify(this.context))
                }
                //axios
                axios({
                    method: 'post',
                    url: '/ChatGPT/AI/TalkAI',
                    data: Body,
                    headers: {
                        'Content-Type': 'application/json; charset=UTF-8',
                        'No-Loding': true
                    },
                }).then((res) => {
                    this.ButLoding = false;
                    context.answer = res.replace('\n\n', '');// （regexp / substr，replach2ent）;
                    this.text = '';
                    setTimeout(() => {
                        SmoothVerticalScrolling(msg, 500, "center");
                    }, 200);
                }).catch((err) => {
                    this.ButLoding = false;
                    this.context = [];
                    vant.Dialog.confirm({
                        title: '提示',
                        message: err,
                        confirmButtonText: '开通会员',
                        cancelButtonText: '取消',
                    }).then(() => {
                        parent.window.HomeVue.HomeHref('/ChatGPT/Pay');
                    }).catch(() => {
                        // on cancel
                    });
                })
                let context = {
                    question: text,
                    answer: 'loding'
                };
                this.context.push(context);
                setTimeout(() => {
                    SmoothVerticalScrolling(msg, 500, "center");
                }, 200);
            }
        },
        watch: {
            text(val) {
                if (val) {
                    this.SendButVisible = true
                } else {
                    this.SendButVisible = false
                }
            },
        },
        mounted() {

        }
    });
    function SmoothVerticalScrolling(e, time, where) {
        var eTop = where == "top" ? (e.getBoundingClientRect().top < 2000 ? e.getBoundingClientRect().top - 1000 : e.getBoundingClientRect().top) : (e.getBoundingClientRect().bottom > 2000 ? e.getBoundingClientRect().bottom + 1000 : e.getBoundingClientRect().bottom);
        console.log(eTop);
        var eAmt = eTop / 100;
        var curTime = 0;
        while (curTime <= time) {
            window.setTimeout(SVS_B, curTime, eAmt, where);
            curTime += time / 100;
        }
    }
    function SVS_B(eAmt, where) {
        window.scrollBy(0, eAmt);
    }
</script>
</html>