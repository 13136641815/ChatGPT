@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="stylesheet" href="/lib/vant/css/index.css" />
    <link href="/ChatGPT_Wx/Style.css" rel="stylesheet" />
    <title></title>
    <style>
        .list {
            padding: 3%;
            border-top: 1px solid #ebebeb;
            width: 94%;
        }

        .User {
            width: 100%;
            margin-bottom: 15px;
        }


        .Message {
            line-height: 28px;
            font-size: 16px;
            margin: 0;
            width: 100%;
            word-wrap: break-word;
            max-width: 100%;
            min-width: 28px;
            text-align: left;
            color: #606266;
        }

        .Time {
            font-size: 10px;
            color: #b3b3b3;
            margin-bottom: 5px;
        }

        .van-image--round {
            background-color: #1989fa;
        }

        .van-sticky--fixed {
        }
    </style>
</head>
<body>
    <div id="app" v-cloak>
        <van-nav-bar title="聊天记录"
                     left-text="返回"
                     left-arrow
                     @@click-left="onClickLeft"></van-nav-bar>
        <van-search v-model="model.UserMessage"
                    show-action
                    placeholder="请输入搜索关键词"
                    @@search="onSearch">
            <template #action>
                <div @@click="onSearch" style="color: #1989fa">搜索</div>
            </template>
        </van-search>
        <van-list v-model="loading"
                  :finished="finished"
                  finished-text="没有更多了"
                  @@load="onLoad">
            <div v-for="(item,index) in list" :key="index">
                <van-sticky v-if="item.Time">
                    <van-notice-bar color="#1989fa" background="#ecf9ff" left-icon="clock-o">
                        {{GetDateShow(item.Time)}}
                    </van-notice-bar>
                </van-sticky>
                <div class="list">
                    <div class="User">
                        <van-row>
                            <van-col span="3">
                                <van-image round
                                           width="2.5rem"
                                           height="2.5rem"
                                           :src="UserInfo.WxHeadUrl"></van-image>
                            </van-col>
                            <van-col span="21">
                                <div class="Time">{{item.Time}}</div>
                                <div class="Message" style=" white-space: pre-wrap;">{{item.UserMessage}}</div>
                            </van-col>
                        </van-row>
                    </div>
                    <div class="AI">
                        <van-row>
                            <van-col span="3">
                                <van-image round
                                           width="2.5rem"
                                           height="2.5rem"
                                           src="/ChatGPT_Wx/Img/ChatGPT.png"></van-image>
                            </van-col>
                            <van-col span="21">
                                <div class="Time">{{item.Time}}</div>
                                <div class="Message" style=" white-space: pre-wrap;">{{item.AIMessage}}</div>
                            </van-col>
                        </van-row>
                    </div>
                </div>
            </div>
        </van-list>
    </div>
    <script src="/ChatGPT_Wx/Global.js"></script>
    <script>
        // 在 #app 标签下渲染一个按钮组件
        new Vue({
            el: '#app',
            data: {
                UserInfo: {},
                list: [],
                loading: false,
                finished: false,
                Times: [],
                model: {
                    UserMessage: '',
                },
                PageParams: {
                    PageSizeList: window.PageSizeList,
                    PageNum: 0,
                    PageSize: 10,
                    Total: 0
                },
            },
            methods: {
                onSearch() {
                    this.list = [];
                    this.Times = [];
                    this.PageParams.PageNum = 1;
                    this.GetList();
                },
                GetList() {
                    this.loading = true;
                    AxiosAsync('/ChatGPT/ChatLog/GetListPage', 'get', {
                        UserMessage: this.model.UserMessage,
                        PageNum: this.PageParams.PageNum,
                        PageSize: this.PageParams.PageSize,
                    }).then(res => {
                        this.loading = false;
                        res.DATA.forEach(item => {
                            let Time = this.GetDateShow(item.Time);
                            if (this.Times.indexOf(Time) == -1) {
                                this.Times.push(Time);
                            } else {
                                item.Time = '';
                            }
                            this.list.push(item);
                        })
                        if (res.DATA.length < this.PageParams.PageSize) {
                            this.finished = true;
                        }
                    }).catch(err => {
                        this.loading = false;
                        console.error(err);
                    });
                },
                onClickLeft() {
                    window.history.go(-1);
                },
                GetDateShow(Time) {
                    if (Time) {
                        let date = new Date(Time.replace(/-/g, '/'));
                        const year = date.getFullYear() // 获取年
                        const month = date.getMonth() + 1 // 获取月
                        const strDate = date.getDate() // 获取日
                        const YMD = `${year}年${month}月${strDate}日`;
                        return YMD;
                    }
                    return '';
                },
                onLoad() {
                    this.PageParams.PageNum++;
                    this.GetList();
                }
            },
            created() {

            },
            async mounted() {
                this.UserInfo = await window.APP_GetUserInfoAsync();
            }
        })
    </script>
</body>
</html>