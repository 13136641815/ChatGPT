@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="stylesheet" href="/lib/vant/css/index.css" />
    <link href="/ChatGPT_Wx/Style.css" rel="stylesheet" />
    <title>@ViewBag.Title</title>
    @*<script src="/lib/eruda/eruda.min.js"></script>
        <script>eruda.init();</script>*@
    <style>
        html {
            width: 100%;
            height: 100%;
        }
        body {
            width: 100%;
            height: 100%;
            background: linear-gradient( #ff7500,#002fa7);
        }
        iframe {
            /*            width: 100%;
            height: 100%;
            position: fixed;
            top: 0px;
            bottom: 50px;*/
            height: 100%;
            width: 100%;
            position: absolute;
            /*position: fixed;*/
            right: 0;
            bottom: 0;
            left: 0;
            top: 0;
            -webkit-overflow-scrolling: touch;
            overflow-y: scroll;
        }

        .scroll-wrapper {
            -webkit-overflow-scrolling: touch;
            overflow-y: scroll;
            /* 提示: 请在此处加上需要设置的大小(dimensions)或位置(positioning)信息! */
        }

            .scroll-wrapper iframe {
                /* 你自己指定的样式 */
            }
        .van-tabbar--fixed {
            position: absolute;
        }
        .PC_App {
            position: relative;
            width: 1000px;
            height: 90%;
            background-color: #ffffff;
            border-radius: 20px;
            overflow: hidden;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        .App {
        
        }
    </style>
</head>

<body>
    <div id="app" :class="AppClass" v-cloak>
        <div class="scroll-wrapper">
            <transition :name="item.transition" v-for="(item,index) in route" :key="index">
                <iframe :id="'IFRAME'+index" v-if="item.islode" :src="item.url" v-show="index==active" data-scrolltop="0" frameborder="0" onload="Lode(this)"></iframe>
            </transition>
        </div>
        <van-tabbar v-show="TabbarShow" v-model="active" safe-area-inset-bottom fixed @@change="tabChange" :before-change="beforeChange">
            <van-tabbar-item v-for="(item,index) in route" :key="index" :icon="item.icon" :dot="item.dot">{{item.name}}</van-tabbar-item>
        </van-tabbar>
    </div>

    <!-- 引入 Vue 和 Vant 的 JS 文件 -->
    <script src="https://res2.wx.qq.com/open/js/jweixin-1.6.0.js"></script>
    <script src="/ChatGPT_Wx/Global.js"></script>
    <script>
        function Lode(dom) {
            window.HomeVue.iframeLode(dom);
        }
    </script>
    <script>
        // 在 #app 标签下渲染一个按钮组件
        window.HomeVue = new Vue({
            el: '#app',
            data: {
                active: 0,
                route: [],
                Index: 0,
                TabbarShow: false,
                isHaveBill: false,
                AppClass:'PC_App'
            },
            methods: {
                ChangeAI(botID) {
                    this.route[0].url = `/ChatGPT/AI/GPT3_5Voice?botID=${botID}`;
                    this.tabChange(0);
                    this.active = 0;
                    this.route[1].transition = 'van-slide-right';
                    this.route[0].transition = 'van-slide-left';
                },
                HomeHref(url) {
                    sessionStorage.setItem("Index", this.Index);
                    window.location.href = url;
                },
                //iframe加载完成事件
                iframeLode(dom) {
                    vant.Toast.clear();
                    let IzOk = false;
                    const url = dom.contentWindow.location.href;
                    if (url != 'about:blank') {
                        this.route.forEach(item => {
                            if (url.indexOf(item.url) != -1) {
                                this.TabbarShow = true;
                                IzOk = true;
                            }
                        });
                        if (!IzOk) {
                            this.TabbarShow = false;
                        }
                    }
                },
                beforeChange(name) {
                    if (!this.route[name].islode) {
                        vant.Toast.loading({
                            message: '加载中...',
                            forbidClick: true,
                            duration: 0,
                        });
                        setTimeout(() => {
                            this.route[name].islode = true;
                            //vant.Toast.clear();
                        }, 500)
                    }
                    if (this.Index < name) {
                        this.route[name].transition = 'van-slide-right';
                        this.route[this.Index].transition = 'van-slide-left';
                    } else {
                        this.route[name].transition = 'van-slide-left';
                        this.route[this.Index].transition = 'van-slide-right';
                    }
                    return true;
                },
                tabChange(index) {
                    this.Index = index;
                    window.location.hash = `#${index}`;
                },
                Wxshare() {
                    const wx_invite_url = location.href;
                    AxiosAsync('/ChatGPT/Home/GetWxShare', 'get', { HtmlURL: wx_invite_url }, true).then(res => {
                        wx.config({
                            debug: false, //调式模式，设置为ture后会直接在网页上弹出调试信息，用于排查问题
                            appId: res.appId,
                            timestamp: parseInt(res.timeStamp),
                            nonceStr: res.nonceStr,
                            signature: res.QM,
                            jsApiList: [ //需要使用的网页服务接口
                                'checkJsApi', //判断当前客户端版本是否支持指定JS接口
                                'updateAppMessageShareData',//分享到微博
                                'updateTimelineShareData',
                                'onMenuShareWeibo'
                            ]
                        });
                        console.log(1);
                        wx.ready(function () {   //需在用户可能点击分享按钮前就先调用
                            wx.updateAppMessageShareData({
                                title: res.nTitle, // 分享标题
                                desc: res.Desc, // 分享描述
                                link: res.Link, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
                                imgUrl: res.ImgUrl, // 分享图标
                                success: function () {
                                }
                            });
                            wx.ready(function () {      //需在用户可能点击分享按钮前就先调用
                                wx.updateTimelineShareData({
                                    title: res.nTitle, // 分享标题
                                    link: res.Link, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
                                    imgUrl: res.ImgUrl, // 分享图标
                                    success: function () {
                                        // 设置成功
                                    }
                                })
                            });
                            wx.onMenuShareWeibo({
                                title: res.nTitle, // 分享标题
                                desc: res.Desc, // 分享描述
                                link: res.Link, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
                                imgUrl: res.ImgUrl, // 分享图标
                                success: function () {
                                    // 用户确认分享后执行的回调函数
                                },
                                cancel: function () {
                                    // 用户取消分享后执行的回调函数
                                }
                            });
                        });
                        console.log(2);
                    }).catch(err => {

                    });
                },
                PageCss() {
                    let width = document.documentElement.clientWidth;
                    if (width > 1000) {
                        this.AppClass = 'PC_App';
                    } else {
                        this.AppClass = 'App';
                    }
                }
            },
            mounted() {
                const that = this;
                this.Wxshare();
                window.onresize = function () {
                    return (function () {
                        that.PageCss();
                    })()
                };
                window.addEventListener('pageshow', function (event) {
                    // 点击回退按钮返回
                    if (event.persisted || window.performance && window.performance.navigation.type == 2) {

                        const href = window.location.hash;
                        if (href) {
                            let maodianID = href.replace('#', '');
                            that.active = Number.parseInt(maodianID);
                            that.Index = Number.parseInt(maodianID);
                        }
                        const Storage = sessionStorage.getItem("Index");
                        if (Storage) {
                            that.active = Number.parseInt(Storage);
                            that.Index = Number.parseInt(Storage);
                        }
                    } else {
                        const href = window.location.hash;
                        if (href) {
                            let maodianID = href.replace('#', '');
                            that.active = Number.parseInt(maodianID);
                            that.Index = Number.parseInt(maodianID);
                        }
                    }
                    that.route = [];
                    const list = [{
                        url: '/ChatGPT/AI/GPT3_5Voice',
                        name: 'ChatBot',
                        icon: 'chat',
                        transition: 'van-slide-right',
                        Index: 0,
                        islode: false,
                        dot: true,
                    },
                    {
                        url: '/ChatGPT/Scene/Index',
                        name: '应用情景',
                        icon: 'gem',
                        transition: 'van-slide-right',
                        Index: 1,
                        islode: false,
                        dot: false,
                    },
                    {
                        url: '/ChatGPT/AIDraw/Index',
                        name: 'AI绘画',
                        icon: 'photo',
                        transition: 'van-slide-right',
                        Index: 3,
                        islode: false,
                        dot: false,
                    },
                    {
                        url: '/ChatGPT/My/PersonalCnter',
                        name: '个人中心',
                        icon: 'manager',
                        transition: 'van-slide-right',
                        Index: 4,
                        islode: false,
                        dot: false,
                    }];
                    list[that.Index].islode = true;
                    list.forEach((item) => {
                        that.route.push(item);
                    });
                    that.TabbarShow = true;
                }, false)
            }
        });
    </script>
</body>
</html>