@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="stylesheet" href="/lib/vant/css/index.css" />
    <link href="/ChatGPT_Wx/Style.css" rel="stylesheet" />
    <title></title>
    <style>
        html {
            background-color: #e0f0ff;
        }

        .ProgrammeItem {
            width: 90px;
            height: 90px;
            border-radius: 5px;
            border: 2px solid #0094ff;
            background-color: #0094ff;
            color: #ffffff;
            float: left;
            margin: 5px;
            text-align: center;
        }

        .Programme {
            width: 90px;
            height: 90px;
            border-radius: 5px;
            border: 2px solid #bebebe;
            float: left;
            margin: 5px;
            text-align: center;
        }

            .Programme .Name {
                color: #838383;
            }

        .Propaganda {
            width: 80%;
            height: 200px;
            background-color: red;
            margin: 0 auto;
            margin-bottom: 20px;
        }

        .groupdiv {
            float: left;
            position: relative;
            left: 50%;
        }

        .van-radio-group {
            width: 315px;
            float: left;
            position: relative;
            left: -50%;
        }

        .van-radio__icon {
            display: none;
        }

        .van-radio__label {
            margin-left: 4px;
        }

        .van-radio {
            width: 105px;
            float: left;
        }

        .Name {
            margin: 0;
            margin-top: 10px;
        }

        .Money {
            margin: 0;
            font-size: 18px;
            font-weight: 700;
            margin-top: 10px;
        }

        .MoneyOld {
            margin: 0;
            font-size: 12px;
            text-decoration: line-through;
            color: #a5a5a5;
        }

        .div_content {
            background-color: #ffffff;
            margin-top: 20px;
            width: 100%;
            border-top-left-radius: 20px;
            border-top-right-radius: 20px;
            padding-top: 40px;
            position: fixed;
            height: 65%;
        }

        .bottom {
            width: 100%;
            position: fixed;
            bottom: 0;
        }
    </style>
</head>
<body>
    <div id="app" v-cloak>
        <van-nav-bar title="充值"
                     left-text="返回"
                     left-arrow
                     @@click-left="onClickLeft" fixed placeholder></van-nav-bar>
        <div class="div_top">
            <div class="Img">
                <van-image round
                           width="7rem"
                           height="7rem"
                           :src="UserInfo.WxHeadUrl" style="box-shadow: rgb(25 137 250) 0px 5px 0px -21px, rgb(25 137 250) 0px 0px 50px 7px; "></van-image>
            </div>
            <div class="Info">
                <div>
                    <p class="P_ID">ID：{{UserInfo.ID}}</p>
                    <p class="P_Name">{{UserInfo.NikeName}}</p>
                    <van-tag type="primary" v-if="UserInfo.IsShowTime">会员</van-tag>
                    <van-tag color="#8f8f8f" v-else>游客</van-tag>
                    <p class="P_Tips" v-if="UserInfo.IsShowTime">将于：{{UserInfo.BeOverdue_VIP}} 到期</p>
                </div>
            </div>
        </div>
        <div class="div_content">
            <!--<div class="Propaganda">

            </div>-->
            <div class="groupdiv">
                <van-radio-group v-model="radio">
                    <van-radio :name="Item.ID" shape="square" v-for="(Item,Index) in CommodityList" :key="Index">
                        <div :class="radio==Item.ID?'ProgrammeItem':'Programme'">
                            <p class="Name">{{Item.CommodityName}}</p>
                            <p class="Money">{{(Item.CommodityPresentPrice/100).toFixed(2)}}元</p>
                            <p class="MoneyOld">{{(Item.CommodityOriginalPrice/100).toFixed(2)}}元</p>
                        </div>
                    </van-radio>
                </van-radio-group>
            </div>
        </div>
        <div class="bottom">
            <van-button type="info" :disabled="ButtonEnable" block style="margin-bottom: 20px; width: 100%;" @@click="Pay">立即{{UserInfo.YN_VIP==1&&UserInfo.BeOverdue_VIP>new Date().toLocaleString()?'续费':'开通'}}</van-button>
            <van-divider>会员服务为虚拟商品，支付成功后不支持退款</van-divider>
        </div>
    </div>
    <script src="/lib/vue/vue.js"></script>
    <script src="/lib/vant/js/vant.js"></script>
    <script src="/lib/axios/axios.js"></script>
    <script>
        // 在 #app 标签下渲染一个按钮组件
        new Vue({
            el: '#app',
            data: {
                radio: 1,
                UserInfo: {},
                CommodityList: [],
                ButtonEnable: false
            },
            methods: {
                onClickLeft() {
                    history.back();
                },
                Pay() {
                    const that = this;
                    that.ButtonEnable = true;
                    axios({
                        method: 'post',
                        url: '/ChatGPT/Pay/DownOrder',
                        data: {
                            ComID: this.radio
                        },
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8',
                            'No-Loding': true
                        },
                    }).then(res => {
                        //模拟支付成功
                        //vant.Toast.loading({
                        //    message: '支付模拟中...',
                        //    forbidClick: true,
                        //    overlay: true,
                        //    forbidClick: true,
                        //    duration: 0
                        //});
                        //axios({
                        //    method: 'get',
                        //    url: '/ChatGPT/PayBack/TestBack',
                        //    params: {
                        //        No: res.OrderNo,
                        //        Openid: that.UserInfo.WxOpenID
                        //    },
                        //    headers: {
                        //        'Content-Type': 'application/json; charset=UTF-8',
                        //        'No-Loding': true
                        //    },
                        //}).then(res => {
                        //    setTimeout(() => {
                        //        vant.Toast.success('支付成功');
                        //        setTimeout(() => {
                        //            vant.Toast.clear();
                        //            history.back();
                        //        }, 2000)
                        //    }, 3000)
                        //}).catch(err => {
                        //    vant.Toast.fail('模拟失败，请重试');
                        //    setTimeout(() => {
                        //        vant.Toast.clear();
                        //    }, 2000)
                        //})
                        //订单校验成功，唤起支付
                        const PayData = res.PayData;
                        const PayConfig = res.PayConfig;
                        axios({
                            method: 'post',
                            url: `/WeChatHome/Pay`,
                            data: {
                                PayData: PayData,
                                PayConfig: PayConfig
                            },
                            headers: {
                                'Content-Type': 'application/json; charset=UTF-8'
                            },
                        }).then(function (res) {
                            const PayJson = JSON.parse(res);
                            WeixinJSBridge.invoke(
                                'getBrandWCPayRequest', PayJson,//josn串
                                function (res) {
                                    if (res.err_msg == "get_brand_wcpay_request:ok") {
                                        //支付成功
                                        history.back();
                                    } else if (res.err_msg == "get_brand_wcpay_request:cancel") {
                                        vant.Notify({ type: 'primary', message: '支付取消' });
                                        that.ButtonEnable = false;
                                    } else {
                                        that.ButtonEnable = false;
                                        vant.Notify({ type: 'warning', message: '支付失败' + res.err_msg });
                                    }
                                }
                            );
                        }).catch(function (err) {
                            setTimeout(() => {
                                vant.Toast({
                                    icon: 'cross',
                                    type: 'fail',
                                    message: err,
                                    duration: 0,
                                    forbidClick: true
                                });
                            }, 600)
                        });
                    }).catch(err => {
                        //下单失败
                        alert(err);
                    })
                },
                GetUserInfo() {
                    axios({
                        method: 'get',
                        url: '/ChatGPT/My/GetInfoModel',
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(res => {
                        this.UserInfo = res;
                    }).catch(err => {

                    })
                },
                GetCommodityList() {
                    axios({
                        method: 'get',
                        url: '/ChatGPT/PayPage/GetCommodityList',
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then(res => {
                        this.CommodityList = res;
                    }).catch(err => {

                    })
                }
            },
            created() {
                this.GetUserInfo();
                this.GetCommodityList();
            },
            mounted() {

            }
        })
    </script>
</body>
</html>