@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="stylesheet" href="/lib/vant/css/index.css" />
    <link href="/ChatGPT_Wx/Style.css" rel="stylesheet" />
    <title></title>
    <style>
        body {
            position: fixed;
            top: 0;
            bottom: 0;
            background-color: #f5f6f7;
        }

        .van-image--round img {
            background-color: #1989fa;
        }
    </style>
</head>
<body>
    <div id="app" v-cloak>
        <div style="width:100%;float:left;">
            <div style="width:25%;float:left;" v-for="(Item,Index) in list" :key="Index" @@click="Jump(Item.ID)">
                <van-image round
                           width="70%"
                           height="70%"
                           style="padding: 15%; padding-bottom: 2%;"
                           :src="Item.Img"></van-image>
                <p style="text-align:center;margin:0px;">{{Item.Name}}</p>
            </div>
        </div>
    </div>
    <script src="/lib/vue/vue.js"></script>
    <script src="/ChatGPT_Wx/Script/script.js"></script>
    <script src="/lib/axios/axios.js"></script>
    <script src="/lib/vant/js/vant.js"></script>
    <script>
        // 在 #app 标签下渲染一个按钮组件
        new Vue({
            el: '#app',
            data: {
                list: []
            },
            methods: {
                Jump(BotID) {
                    parent.HomeVue.ChangeAI(BotID);
                },
                GetList() {
                    const that = this;
                    axios({
                        method: 'get',
                        url: '/ChatGPT/Scene/GetBot',
                        headers: {
                            'Content-Type': 'application/json; charset=UTF-8'
                        },
                    }).then((res) => {
                        res.forEach(img => {//图片预加载
                            let imgObj = new Image(); // 创建图片对象
                            imgObj.src = img.Img;
                            imgObj.addEventListener('load', function () { // 这里没有考虑error，实际上要考虑
                                that.list.push(img);//将加载好的图片放入到渲染集合中
                            }, false);
                        })
                    }).catch(err => {

                    })
                }
            },
            created() {
                this.GetList();
            },
            mounted() {

            }
        })
    </script>
</body>
</html>